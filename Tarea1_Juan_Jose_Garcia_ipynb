{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "xQq4Vi32-hdJ"
   },
   "source": [
    "\n",
    "<img src=\"https://www.unad.edu.co/images/footer/logo-unad-acreditacion-min.png\" width=\"780\" height=\"140\" align=\"right\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Fn5lIj0dj7Ju"
   },
   "source": [
    "<p align=\"center\">Curso:Machine Learning</p>\n",
    "\n",
    "<p align=\"center\"> Código Curso: 203008067 </p>\n",
    "\n",
    "<p align=\"center\"> Grupo: 7 </p>\n",
    "\n",
    " <p align=\"center\"> Fase 5 - Prueba Objetiva Abierta</p>\n",
    "\n",
    " <p align=\"center\">  Presentado por: Juan José García Sánchez</p>\n",
    "\n",
    "<p align=\"center\"> Código: 1703</p>\n",
    "\n",
    " <p align=\"center\">  Tutor(a): Isaac Camargo Freile </p>\n",
    "\n",
    " <p align=\"center\"> 17/07/2024</p>\n",
    "\n",
    " <p align=\"center\"> UNIVERSIDAD NACIONAL ABIERTA Y A DISTANCIA - UNAD </p>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Importar librerias"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "e55mgKkuW1y6",
    "outputId": "33c3965e-5804-41e7-8669-b676570e7ce3"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#las funciones definidas aqui se usaran mas adelantes en el ejercicio, son para calcular metricas y graficar\n",
    "\n",
    "def mostrar_metricas(y_real, y_predicho, decimales = 4):\n",
    "    \n",
    "    mse = metrics.mean_squared_error(y_real, y_predicho)\n",
    "    rmse = np.sqrt(mse)\n",
    "    r2 = metrics.r2_score(y_real, y_predicho)\n",
    "    mae =  metrics.mean_absolute_error(y_real, y_predicho)\n",
    "    print(\n",
    "    f\"R2  : {r2:.{decimales}f}\",\n",
    "    f\"MSE : {mse:.{decimales}f}\",\n",
    "    f\"RMSE: {rmse:.{decimales}f}\",\n",
    "    f\"MAE : {mae:.{decimales}f}\",\n",
    "    sep = \"\\n\",\n",
    "    )\n",
    "\n",
    "\n",
    "def matriz_confusion(y_real, y_predicho):\n",
    "    matriz = metrics.confusion_matrix(y_real, y_predicho)\n",
    "    heatmap(matriz, \"Matriz Confusion\", \"d\")\n",
    "    ax = plt.gca()\n",
    "    ax.set_xlabel(\"Valor Predicho\")\n",
    "    ax.set_ylabel(\"Valor Real\")\n",
    "\n",
    "\n",
    "def heatmap(matriz, titulo, formato=\".2f\", tamaño = (4, 4), mapa=\"Reds\"):\n",
    "    plt.figure(figsize=tamaño)\n",
    "    sns.heatmap(matriz, annot=True, cmap=mapa, fmt=formato)\n",
    "    plt.title(titulo)\n",
    "\n",
    "#funcion para obtener el nivel de productividad\n",
    "\n",
    "#funcion para calcular nivel productividad (productividad alta: 1; productividad baja: 0)\n",
    "obtener_nivel = lambda array: np.where(array > 0.7, 1, 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Limpieza de datos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "nYJMTGE8J3dV",
    "outputId": "718e85c7-23b6-4eb0-e3f2-2e3227d1572d"
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'pd' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 4\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# Carga los datos en un dataframe de Pandas\u001b[39;00m\n\u001b[0;32m      2\u001b[0m \n\u001b[0;32m      3\u001b[0m \u001b[38;5;66;03m#limpiado de datos, el archivo csv debe estar en el mismo directorio\u001b[39;00m\n\u001b[1;32m----> 4\u001b[0m df_crudo \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_csv(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mAnexo 1- Base de Datos dynamic_pricing\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m      6\u001b[0m df_crudo\u001b[38;5;241m.\u001b[39mdrop_duplicates()\n\u001b[0;32m      8\u001b[0m \u001b[38;5;66;03m#limpieza hecha para los tres modelos: modelo lineal, logistico, y knn. se elimina la columna \"wip\"\u001b[39;00m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'pd' is not defined"
     ]
    }
   ],
   "source": [
    "# Carga los datos en un dataframe de Pandas\n",
    "\n",
    "#limpiado de datos, el archivo csv debe estar en el mismo directorio\n",
    "df_crudo = pd.read_csv('Anexo 1- Base de Datos dynamic_pricing')\n",
    "\n",
    "df_crudo.drop_duplicates()\n",
    "\n",
    "#limpieza hecha para los tres modelos: modelo lineal, logistico, y knn. se elimina la columna \"wip\"\n",
    "df_modelos = df_crudo.dropna(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>team</th>\n",
       "      <th>targeted_productivity</th>\n",
       "      <th>smv</th>\n",
       "      <th>over_time</th>\n",
       "      <th>incentive</th>\n",
       "      <th>idle_time</th>\n",
       "      <th>idle_men</th>\n",
       "      <th>no_of_style_change</th>\n",
       "      <th>no_of_workers</th>\n",
       "      <th>actual_productivity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1197.000000</td>\n",
       "      <td>1197.000000</td>\n",
       "      <td>1197.000000</td>\n",
       "      <td>1197.000000</td>\n",
       "      <td>1197.000000</td>\n",
       "      <td>1197.000000</td>\n",
       "      <td>1197.000000</td>\n",
       "      <td>1197.000000</td>\n",
       "      <td>1197.000000</td>\n",
       "      <td>1197.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>6.426901</td>\n",
       "      <td>0.729632</td>\n",
       "      <td>15.062172</td>\n",
       "      <td>4567.460317</td>\n",
       "      <td>38.210526</td>\n",
       "      <td>0.730159</td>\n",
       "      <td>0.369256</td>\n",
       "      <td>0.150376</td>\n",
       "      <td>34.609858</td>\n",
       "      <td>0.735091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.463963</td>\n",
       "      <td>0.097891</td>\n",
       "      <td>10.943219</td>\n",
       "      <td>3348.823563</td>\n",
       "      <td>160.182643</td>\n",
       "      <td>12.709757</td>\n",
       "      <td>3.268987</td>\n",
       "      <td>0.427848</td>\n",
       "      <td>22.197687</td>\n",
       "      <td>0.174488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.070000</td>\n",
       "      <td>2.900000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.233705</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.700000</td>\n",
       "      <td>3.940000</td>\n",
       "      <td>1440.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>0.650307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>15.260000</td>\n",
       "      <td>3960.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>34.000000</td>\n",
       "      <td>0.773333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>9.000000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>24.260000</td>\n",
       "      <td>6960.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>0.850253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>12.000000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>54.560000</td>\n",
       "      <td>25920.000000</td>\n",
       "      <td>3600.000000</td>\n",
       "      <td>300.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>89.000000</td>\n",
       "      <td>1.120437</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              team  targeted_productivity          smv     over_time  \\\n",
       "count  1197.000000            1197.000000  1197.000000   1197.000000   \n",
       "mean      6.426901               0.729632    15.062172   4567.460317   \n",
       "std       3.463963               0.097891    10.943219   3348.823563   \n",
       "min       1.000000               0.070000     2.900000      0.000000   \n",
       "25%       3.000000               0.700000     3.940000   1440.000000   \n",
       "50%       6.000000               0.750000    15.260000   3960.000000   \n",
       "75%       9.000000               0.800000    24.260000   6960.000000   \n",
       "max      12.000000               0.800000    54.560000  25920.000000   \n",
       "\n",
       "         incentive    idle_time     idle_men  no_of_style_change  \\\n",
       "count  1197.000000  1197.000000  1197.000000         1197.000000   \n",
       "mean     38.210526     0.730159     0.369256            0.150376   \n",
       "std     160.182643    12.709757     3.268987            0.427848   \n",
       "min       0.000000     0.000000     0.000000            0.000000   \n",
       "25%       0.000000     0.000000     0.000000            0.000000   \n",
       "50%       0.000000     0.000000     0.000000            0.000000   \n",
       "75%      50.000000     0.000000     0.000000            0.000000   \n",
       "max    3600.000000   300.000000    45.000000            2.000000   \n",
       "\n",
       "       no_of_workers  actual_productivity  \n",
       "count    1197.000000          1197.000000  \n",
       "mean       34.609858             0.735091  \n",
       "std        22.197687             0.174488  \n",
       "min         2.000000             0.233705  \n",
       "25%         9.000000             0.650307  \n",
       "50%        34.000000             0.773333  \n",
       "75%        57.000000             0.850253  \n",
       "max        89.000000             1.120437  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " df_modelos.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['date', 'quarter', 'department', 'day', 'team', 'targeted_productivity',\n",
       "       'smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men',\n",
       "       'no_of_style_change', 'no_of_workers', 'actual_productivity'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_arbol_crudo.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       ...,\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "binarize(df_modelos[\"actual_productivity\"].values.reshape(-1,1), threshold=0.7)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Cargue, separacion y analisis de datos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\frajg\\AppData\\Local\\Temp\\ipykernel_14068\\4151940208.py:10: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_entre[\"nivel_productividad\"] = binarize(df_modelos[\"actual_productivity\"].values.reshape(-1,1), threshold=0.7)\n"
     ]
    }
   ],
   "source": [
    "#separando campos necesarios para entrenamiento\n",
    "\n",
    "caracteristicas = [\"no_of_workers\", \"over_time\"]\n",
    "\n",
    "prep_num = ColumnTransformer([('escalado', MinMaxScaler(), caracteristicas),],\n",
    "                  remainder= 'drop')\n",
    "\n",
    "df_entre = df_modelos[caracteristicas + [\"actual_productivity\"]]\n",
    "\n",
    "df_entre[\"nivel_productividad\"] = Binarizer(df_modelos[\"actual_productivity\"], threshold=0.7)\n",
    "\n",
    "\n",
    "# Dividir los datos en conjuntos de entrenamiento y prueba (por ejemplo, 70% entrenamiento y 30% prueba)\n",
    "X_entre, X_prueba, nivel_entre, nivel_prueba = train_test_split(df_entre[caracteristicas],\n",
    "                                                        df_entre[\"nivel_productividad\"], \n",
    "                                                        train_size=0.7, \n",
    "                                                        random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "matriz_correlacion = df_entre.corr()\n",
    "# matriz de correlacion entre variables\n",
    "heatmap(matriz_correlacion.abs(), \"correlacion\", \".2f\", (8,6))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "KrHiV966lNfi"
   },
   "source": [
    "# Modelo Logístico."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "jpasfBP5lN-y"
   },
   "source": [
    "- a. Construir la variable ‘nivel_productividad’ con niveles alto y bajo. Considere nivel alto a productividad real > 0.7 y nivel bajo a productividad real <=0.7.\n",
    "- b. Con la base de entrenamiento aplicar un modelo de regresión logística para predecir el ‘nivel_productividad’ basado en el número de trabajadores de cada equipo y el tiempo extra en minutos.\n",
    "- c. Realizar las predicciones sobre la base de prueba. Calcule la precisión (accuracy) sobre los datos de prueba."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocesamiento&#x27;,\n",
       "                 ColumnTransformer(transformers=[(&#x27;escalado&#x27;, MinMaxScaler(),\n",
       "                                                  [&#x27;no_of_workers&#x27;,\n",
       "                                                   &#x27;over_time&#x27;])])),\n",
       "                (&#x27;logistico&#x27;, LogisticRegression())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;preprocesamiento&#x27;,\n",
       "                 ColumnTransformer(transformers=[(&#x27;escalado&#x27;, MinMaxScaler(),\n",
       "                                                  [&#x27;no_of_workers&#x27;,\n",
       "                                                   &#x27;over_time&#x27;])])),\n",
       "                (&#x27;logistico&#x27;, LogisticRegression())])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;preprocesamiento: ColumnTransformer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for preprocesamiento: ColumnTransformer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;escalado&#x27;, MinMaxScaler(),\n",
       "                                 [&#x27;no_of_workers&#x27;, &#x27;over_time&#x27;])])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">escalado</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;no_of_workers&#x27;, &#x27;over_time&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;MinMaxScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.MinMaxScaler.html\">?<span>Documentation for MinMaxScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>MinMaxScaler()</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression()</pre></div> </div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('preprocesamiento',\n",
       "                 ColumnTransformer(transformers=[('escalado', MinMaxScaler(),\n",
       "                                                  ['no_of_workers',\n",
       "                                                   'over_time'])])),\n",
       "                ('logistico', LogisticRegression())])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#construyendo las variables para el nivel de produtividad (productividad alta: 1; productividad baja: 0)\n",
    "\n",
    "modelo_log = Pipeline([\n",
    "    (\"preprocesamiento\", prep_num),\n",
    "    (\"logistico\", LogisticRegression())\n",
    "])\n",
    "\n",
    "modelo_log.fit(X_entre, nivel_entre)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.45387304, -0.01670841]])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#coeficientes\n",
    "modelo_log.named_steps[\"logistico\"].coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "nivel_entre_pred = modelo_log.predict(X_entre)\n",
    "nivel_prueba_pred = modelo_log.predict(X_prueba)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " ## Prueba del Modelo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "exactitud entrenamiento: 0.691\n",
      "exactitud prueba: 0.703\n"
     ]
    }
   ],
   "source": [
    "acc_entre = metrics.accuracy_score(nivel_entre, nivel_entre_pred)\n",
    "acc_prueba = metrics.accuracy_score(nivel_prueba, nivel_prueba_pred)\n",
    "\n",
    "print(f\"exactitud entrenamiento: {acc_entre:0.3f}\", )\n",
    "print(f\"exactitud prueba: {acc_prueba:0.3f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "matriz_confusion(nivel_prueba, nivel_prueba_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.00      0.00      0.00       107\n",
      "         1.0       0.70      1.00      0.83       253\n",
      "\n",
      "    accuracy                           0.70       360\n",
      "   macro avg       0.35      0.50      0.41       360\n",
      "weighted avg       0.49      0.70      0.58       360\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\frajg\\miniconda3\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "C:\\Users\\frajg\\miniconda3\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "C:\\Users\\frajg\\miniconda3\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
     ]
    }
   ],
   "source": [
    "print(metrics.classification_report(nivel_prueba, nivel_prueba_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "3kgJdvEclvMf"
   },
   "source": [
    "# Aplicación K-NN."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "oO7NqQb_lu7P"
   },
   "source": [
    "- a. Con la base de entrenamiento, aplicar un modelo KNN de aprendizaje automático que pueda aprender del número de trabajadores de cada equipo y el tiempo extra en minutos, para predecir “nivel_productividad”.\n",
    "- b. Realizar las predicciones sobre la base de prueba. Calcule la precisión (accuracy) sobre los datos de prueba."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "id": "IMvcbVusWsK1"
   },
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 75
    },
    "id": "MNc7lpTeWsK2",
    "outputId": "f9db1c2a-8b9e-4d42-c07d-c7deb06934ed",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-3 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-3 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-3 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-3 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-3 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocesamiento&#x27;,\n",
       "                 ColumnTransformer(transformers=[(&#x27;escalado&#x27;, MinMaxScaler(),\n",
       "                                                  [&#x27;no_of_workers&#x27;,\n",
       "                                                   &#x27;over_time&#x27;])])),\n",
       "                (&#x27;logistico&#x27;, KNeighborsClassifier())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;preprocesamiento&#x27;,\n",
       "                 ColumnTransformer(transformers=[(&#x27;escalado&#x27;, MinMaxScaler(),\n",
       "                                                  [&#x27;no_of_workers&#x27;,\n",
       "                                                   &#x27;over_time&#x27;])])),\n",
       "                (&#x27;logistico&#x27;, KNeighborsClassifier())])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;preprocesamiento: ColumnTransformer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for preprocesamiento: ColumnTransformer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;escalado&#x27;, MinMaxScaler(),\n",
       "                                 [&#x27;no_of_workers&#x27;, &#x27;over_time&#x27;])])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">escalado</label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;no_of_workers&#x27;, &#x27;over_time&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;MinMaxScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.MinMaxScaler.html\">?<span>Documentation for MinMaxScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>MinMaxScaler()</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;KNeighborsClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier()</pre></div> </div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('preprocesamiento',\n",
       "                 ColumnTransformer(transformers=[('escalado', MinMaxScaler(),\n",
       "                                                  ['no_of_workers',\n",
       "                                                   'over_time'])])),\n",
       "                ('logistico', KNeighborsClassifier())])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Entrenar el modelo con el mejor valor de k\n",
    "\n",
    "modelo_knn = Pipeline([\n",
    "    (\"preprocesamiento\", prep_num),\n",
    "    (\"logistico\", KNeighborsClassifier(n_neighbors=5))\n",
    "])\n",
    "\n",
    "modelo_knn.fit(X_entre, nivel_entre)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "nivel_entre_knn_pred = modelo_knn.predict(X_entre)\n",
    "nivel_prueba_knn_pred = modelo_knn.predict(X_prueba)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " ## Prueba del Modelo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "precision entrenamiento: 0.754\n",
      "precision prueba: 0.692\n"
     ]
    }
   ],
   "source": [
    "acc_entre = metrics.accuracy_score(nivel_entre, nivel_entre_knn_pred)\n",
    "acc_prueba = metrics.accuracy_score(nivel_prueba, nivel_prueba_knn_pred)\n",
    "\n",
    "print(f\"precision entrenamiento: {acc_entre:0.3f}\", )\n",
    "print(f\"precision prueba: {acc_prueba:0.3f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "matriz_confusion(nivel_prueba, nivel_prueba_knn_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.47      0.34      0.39       107\n",
      "         1.0       0.75      0.84      0.79       253\n",
      "\n",
      "    accuracy                           0.69       360\n",
      "   macro avg       0.61      0.59      0.59       360\n",
      "weighted avg       0.67      0.69      0.67       360\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(metrics.classification_report(nivel_prueba, nivel_prueba_knn_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "GhHXoPVDluqX"
   },
   "source": [
    "# Aplicación Árboles de decisión (CART)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "CAcy1tEKmTV5"
   },
   "source": [
    "- a. Con la base de entrenamiento, aplicar un modelo de árboles de decisión para distinguir “nivel_productividad” bajo y alto usando todas las características.\n",
    "- b. Usando la función graphviz() visualizar el diagrama de árbol.\n",
    "- c. Realizar las predicciones sobre la base de prueba. Calcule la precisión (accuracy) sobre los datos de prueba."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.tree import export_graphviz\n",
    "from sklearn.tree import plot_tree\n",
    "from sklearn import tree\n",
    "import graphviz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 226
    },
    "id": "6pf74kfKyAHO",
    "outputId": "d400be20-17dd-45b6-b5a6-61fab7915813"
   },
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Expected a 2-dimensional container but got <class 'pandas.core.series.Series'> instead. Pass a DataFrame containing a single row (i.e. single sample) or a single column (i.e. single feature) instead.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[61], line 20\u001b[0m\n\u001b[0;32m     16\u001b[0m df_arbol \u001b[38;5;241m=\u001b[39m df_arbol_crudo[caracteristicas]\n\u001b[0;32m     18\u001b[0m \u001b[38;5;28mbin\u001b[39m \u001b[38;5;241m=\u001b[39m Binarizer(threshold\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0.7\u001b[39m)\n\u001b[1;32m---> 20\u001b[0m df_arbol[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnivel_productividad\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mbin\u001b[39m\u001b[38;5;241m.\u001b[39mfit_transform(df_arbol_crudo[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mactual_productivity\u001b[39m\u001b[38;5;124m\"\u001b[39m] )\n\u001b[0;32m     22\u001b[0m X_entre_arbol, X_prueba_arbol, nivel_arbol_entre, nivel_arbol_prueba \u001b[38;5;241m=\u001b[39m train_test_split(\n\u001b[0;32m     23\u001b[0m     df_arbol\u001b[38;5;241m.\u001b[39mdrop(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnivel_productividad\u001b[39m\u001b[38;5;124m'\u001b[39m,axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m),\n\u001b[0;32m     24\u001b[0m     df_arbol[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnivel_productividad\u001b[39m\u001b[38;5;124m\"\u001b[39m], \n\u001b[0;32m     25\u001b[0m     train_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0.7\u001b[39m, \n\u001b[0;32m     26\u001b[0m     random_state\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m42\u001b[39m)\n\u001b[0;32m     28\u001b[0m df_arbol\u001b[38;5;241m.\u001b[39mhead(\u001b[38;5;241m5\u001b[39m)\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\utils\\_set_output.py:313\u001b[0m, in \u001b[0;36m_wrap_method_output.<locals>.wrapped\u001b[1;34m(self, X, *args, **kwargs)\u001b[0m\n\u001b[0;32m    311\u001b[0m \u001b[38;5;129m@wraps\u001b[39m(f)\n\u001b[0;32m    312\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mwrapped\u001b[39m(\u001b[38;5;28mself\u001b[39m, X, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m--> 313\u001b[0m     data_to_wrap \u001b[38;5;241m=\u001b[39m f(\u001b[38;5;28mself\u001b[39m, X, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    314\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(data_to_wrap, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[0;32m    315\u001b[0m         \u001b[38;5;66;03m# only wrap the first output for cross decomposition\u001b[39;00m\n\u001b[0;32m    316\u001b[0m         return_tuple \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m    317\u001b[0m             _wrap_data_with_container(method, data_to_wrap[\u001b[38;5;241m0\u001b[39m], X, \u001b[38;5;28mself\u001b[39m),\n\u001b[0;32m    318\u001b[0m             \u001b[38;5;241m*\u001b[39mdata_to_wrap[\u001b[38;5;241m1\u001b[39m:],\n\u001b[0;32m    319\u001b[0m         )\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:1098\u001b[0m, in \u001b[0;36mTransformerMixin.fit_transform\u001b[1;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[0;32m   1083\u001b[0m         warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[0;32m   1084\u001b[0m             (\n\u001b[0;32m   1085\u001b[0m                 \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mThis object (\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m) has a `transform`\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   1093\u001b[0m             \u001b[38;5;167;01mUserWarning\u001b[39;00m,\n\u001b[0;32m   1094\u001b[0m         )\n\u001b[0;32m   1096\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m y \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m   1097\u001b[0m     \u001b[38;5;66;03m# fit method of arity 1 (unsupervised transformation)\u001b[39;00m\n\u001b[1;32m-> 1098\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfit(X, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mfit_params)\u001b[38;5;241m.\u001b[39mtransform(X)\n\u001b[0;32m   1099\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   1100\u001b[0m     \u001b[38;5;66;03m# fit method of arity 2 (supervised transformation)\u001b[39;00m\n\u001b[0;32m   1101\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfit(X, y, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mfit_params)\u001b[38;5;241m.\u001b[39mtransform(X)\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:1473\u001b[0m, in \u001b[0;36m_fit_context.<locals>.decorator.<locals>.wrapper\u001b[1;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1466\u001b[0m     estimator\u001b[38;5;241m.\u001b[39m_validate_params()\n\u001b[0;32m   1468\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m config_context(\n\u001b[0;32m   1469\u001b[0m     skip_parameter_validation\u001b[38;5;241m=\u001b[39m(\n\u001b[0;32m   1470\u001b[0m         prefer_skip_nested_validation \u001b[38;5;129;01mor\u001b[39;00m global_skip_validation\n\u001b[0;32m   1471\u001b[0m     )\n\u001b[0;32m   1472\u001b[0m ):\n\u001b[1;32m-> 1473\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m fit_method(estimator, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\preprocessing\\_data.py:2277\u001b[0m, in \u001b[0;36mBinarizer.fit\u001b[1;34m(self, X, y)\u001b[0m\n\u001b[0;32m   2257\u001b[0m \u001b[38;5;129m@_fit_context\u001b[39m(prefer_skip_nested_validation\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m   2258\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mfit\u001b[39m(\u001b[38;5;28mself\u001b[39m, X, y\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[0;32m   2259\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Only validates estimator's parameters.\u001b[39;00m\n\u001b[0;32m   2260\u001b[0m \n\u001b[0;32m   2261\u001b[0m \u001b[38;5;124;03m    This method allows to: (i) validate the estimator's parameters and\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   2275\u001b[0m \u001b[38;5;124;03m        Fitted transformer.\u001b[39;00m\n\u001b[0;32m   2276\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m-> 2277\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_data(X, accept_sparse\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcsr\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m   2278\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:633\u001b[0m, in \u001b[0;36mBaseEstimator._validate_data\u001b[1;34m(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)\u001b[0m\n\u001b[0;32m    631\u001b[0m         out \u001b[38;5;241m=\u001b[39m X, y\n\u001b[0;32m    632\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m no_val_X \u001b[38;5;129;01mand\u001b[39;00m no_val_y:\n\u001b[1;32m--> 633\u001b[0m     out \u001b[38;5;241m=\u001b[39m check_array(X, input_name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mX\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mcheck_params)\n\u001b[0;32m    634\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m no_val_X \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m no_val_y:\n\u001b[0;32m    635\u001b[0m     out \u001b[38;5;241m=\u001b[39m _check_y(y, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mcheck_params)\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\utils\\validation.py:1050\u001b[0m, in \u001b[0;36mcheck_array\u001b[1;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[0;32m   1043\u001b[0m         \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   1044\u001b[0m             msg \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m   1045\u001b[0m                 \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mExpected 2D array, got 1D array instead:\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124marray=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00marray\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1046\u001b[0m                 \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mReshape your data either using array.reshape(-1, 1) if \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1047\u001b[0m                 \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124myour data has a single feature or array.reshape(1, -1) \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1048\u001b[0m                 \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mif it contains a single sample.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1049\u001b[0m             )\n\u001b[1;32m-> 1050\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg)\n\u001b[0;32m   1052\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m dtype_numeric \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(array\u001b[38;5;241m.\u001b[39mdtype, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mkind\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;129;01mand\u001b[39;00m array\u001b[38;5;241m.\u001b[39mdtype\u001b[38;5;241m.\u001b[39mkind \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mUSV\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m   1053\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m   1054\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdtype=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnumeric\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m is not compatible with arrays of bytes/strings.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1055\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mConvert your data to numeric values explicitly instead.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1056\u001b[0m     )\n",
      "\u001b[1;31mValueError\u001b[0m: Expected a 2-dimensional container but got <class 'pandas.core.series.Series'> instead. Pass a DataFrame containing a single row (i.e. single sample) or a single column (i.e. single feature) instead."
     ]
    }
   ],
   "source": [
    "#definir el nivle de productivad, con la funcion de nivel\n",
    "\n",
    "carac_numericas = ['smv', 'wip', 'over_time', 'incentive', 'idle_time', 'idle_men',\n",
    "       'no_of_style_change', 'no_of_workers', 'targeted_productivity']\n",
    "\n",
    "carac_categoricas = ['quarter', 'day']\n",
    "\n",
    "caracteristicas = carac_numericas + carac_categoricas + [\"team\"]\n",
    "\n",
    "prep_arbol = ColumnTransformer([\n",
    "    (\"numericas\", MinMaxScaler(), carac_numericas),\n",
    "    (\"categoricas\", OneHotEncoder(), carac_categoricas),\n",
    "    (\"equipo\", OrdinalEncoder(), \"team\")]\n",
    ")\n",
    "\n",
    "df_arbol = df_arbol_crudo[caracteristicas]\n",
    "\n",
    "bin = Binarizer(threshold=0.7)\n",
    "\n",
    "df_arbol[\"nivel_productividad\"] = bin.fit_transform(df_arbol_crudo[\"actual_productivity\"] )\n",
    "\n",
    "X_entre_arbol, X_prueba_arbol, nivel_arbol_entre, nivel_arbol_prueba = train_test_split(\n",
    "    df_arbol.drop('nivel_productividad',axis=1),\n",
    "    df_arbol[\"nivel_productividad\"], \n",
    "    train_size=0.7, \n",
    "    random_state=42)\n",
    "\n",
    "df_arbol.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'nivel_productividad'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3805\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3804\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 3805\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[0;32m   3806\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[1;32mindex.pyx:167\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mindex.pyx:196\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\\\_libs\\\\hashtable_class_helper.pxi:7081\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\\\_libs\\\\hashtable_class_helper.pxi:7089\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'nivel_productividad'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[63], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m df_arbol[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnivel_productividad\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\pandas\\core\\frame.py:4102\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   4100\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m   4101\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[1;32m-> 4102\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mget_loc(key)\n\u001b[0;32m   4103\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[0;32m   4104\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3812\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3807\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[0;32m   3808\u001b[0m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc\u001b[38;5;241m.\u001b[39mIterable)\n\u001b[0;32m   3809\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[0;32m   3810\u001b[0m     ):\n\u001b[0;32m   3811\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[1;32m-> 3812\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m   3813\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[0;32m   3814\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[0;32m   3815\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[0;32m   3816\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[0;32m   3817\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n",
      "\u001b[1;31mKeyError\u001b[0m: 'nivel_productividad'"
     ]
    }
   ],
   "source": [
    "df_arbol[\"nivel_productividad\"].__class__\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Expected a 2-dimensional container but got <class 'pandas.core.series.Series'> instead. Pass a DataFrame containing a single row (i.e. single sample) or a single column (i.e. single feature) instead.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[54], line 13\u001b[0m\n\u001b[0;32m      3\u001b[0m modelo_dt \u001b[38;5;241m=\u001b[39m Pipeline([\n\u001b[0;32m      4\u001b[0m     (\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpreprocesamiento\u001b[39m\u001b[38;5;124m\"\u001b[39m, prep_arbol),\n\u001b[0;32m      5\u001b[0m     (\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124marbol\u001b[39m\u001b[38;5;124m\"\u001b[39m, DecisionTreeClassifier(\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m      9\u001b[0m           ))\n\u001b[0;32m     10\u001b[0m ])\n\u001b[0;32m     12\u001b[0m \u001b[38;5;66;03m# Entrenamiento del modelo\u001b[39;00m\n\u001b[1;32m---> 13\u001b[0m modelo_dt\u001b[38;5;241m.\u001b[39mfit(X_entre_arbol, nivel_arbol_entre)\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:1473\u001b[0m, in \u001b[0;36m_fit_context.<locals>.decorator.<locals>.wrapper\u001b[1;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1466\u001b[0m     estimator\u001b[38;5;241m.\u001b[39m_validate_params()\n\u001b[0;32m   1468\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m config_context(\n\u001b[0;32m   1469\u001b[0m     skip_parameter_validation\u001b[38;5;241m=\u001b[39m(\n\u001b[0;32m   1470\u001b[0m         prefer_skip_nested_validation \u001b[38;5;129;01mor\u001b[39;00m global_skip_validation\n\u001b[0;32m   1471\u001b[0m     )\n\u001b[0;32m   1472\u001b[0m ):\n\u001b[1;32m-> 1473\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m fit_method(estimator, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\pipeline.py:469\u001b[0m, in \u001b[0;36mPipeline.fit\u001b[1;34m(self, X, y, **params)\u001b[0m\n\u001b[0;32m    426\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Fit the model.\u001b[39;00m\n\u001b[0;32m    427\u001b[0m \n\u001b[0;32m    428\u001b[0m \u001b[38;5;124;03mFit all the transformers one after the other and sequentially transform the\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    466\u001b[0m \u001b[38;5;124;03m    Pipeline with fitted steps.\u001b[39;00m\n\u001b[0;32m    467\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    468\u001b[0m routed_params \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_method_params(method\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfit\u001b[39m\u001b[38;5;124m\"\u001b[39m, props\u001b[38;5;241m=\u001b[39mparams)\n\u001b[1;32m--> 469\u001b[0m Xt \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fit(X, y, routed_params)\n\u001b[0;32m    470\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m _print_elapsed_time(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPipeline\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_log_message(\u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msteps) \u001b[38;5;241m-\u001b[39m \u001b[38;5;241m1\u001b[39m)):\n\u001b[0;32m    471\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_final_estimator \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpassthrough\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\pipeline.py:406\u001b[0m, in \u001b[0;36mPipeline._fit\u001b[1;34m(self, X, y, routed_params)\u001b[0m\n\u001b[0;32m    404\u001b[0m     cloned_transformer \u001b[38;5;241m=\u001b[39m clone(transformer)\n\u001b[0;32m    405\u001b[0m \u001b[38;5;66;03m# Fit or load from cache the current transformer\u001b[39;00m\n\u001b[1;32m--> 406\u001b[0m X, fitted_transformer \u001b[38;5;241m=\u001b[39m fit_transform_one_cached(\n\u001b[0;32m    407\u001b[0m     cloned_transformer,\n\u001b[0;32m    408\u001b[0m     X,\n\u001b[0;32m    409\u001b[0m     y,\n\u001b[0;32m    410\u001b[0m     \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m    411\u001b[0m     message_clsname\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPipeline\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    412\u001b[0m     message\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_log_message(step_idx),\n\u001b[0;32m    413\u001b[0m     params\u001b[38;5;241m=\u001b[39mrouted_params[name],\n\u001b[0;32m    414\u001b[0m )\n\u001b[0;32m    415\u001b[0m \u001b[38;5;66;03m# Replace the transformer of the step with the fitted\u001b[39;00m\n\u001b[0;32m    416\u001b[0m \u001b[38;5;66;03m# transformer. This is necessary when loading the transformer\u001b[39;00m\n\u001b[0;32m    417\u001b[0m \u001b[38;5;66;03m# from the cache.\u001b[39;00m\n\u001b[0;32m    418\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msteps[step_idx] \u001b[38;5;241m=\u001b[39m (name, fitted_transformer)\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\joblib\\memory.py:312\u001b[0m, in \u001b[0;36mNotMemorizedFunc.__call__\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    311\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m--> 312\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfunc(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\pipeline.py:1310\u001b[0m, in \u001b[0;36m_fit_transform_one\u001b[1;34m(transformer, X, y, weight, message_clsname, message, params)\u001b[0m\n\u001b[0;32m   1308\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m _print_elapsed_time(message_clsname, message):\n\u001b[0;32m   1309\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(transformer, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfit_transform\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n\u001b[1;32m-> 1310\u001b[0m         res \u001b[38;5;241m=\u001b[39m transformer\u001b[38;5;241m.\u001b[39mfit_transform(X, y, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mparams\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfit_transform\u001b[39m\u001b[38;5;124m\"\u001b[39m, {}))\n\u001b[0;32m   1311\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   1312\u001b[0m         res \u001b[38;5;241m=\u001b[39m transformer\u001b[38;5;241m.\u001b[39mfit(X, y, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mparams\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfit\u001b[39m\u001b[38;5;124m\"\u001b[39m, {}))\u001b[38;5;241m.\u001b[39mtransform(\n\u001b[0;32m   1313\u001b[0m             X, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mparams\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtransform\u001b[39m\u001b[38;5;124m\"\u001b[39m, {})\n\u001b[0;32m   1314\u001b[0m         )\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\utils\\_set_output.py:313\u001b[0m, in \u001b[0;36m_wrap_method_output.<locals>.wrapped\u001b[1;34m(self, X, *args, **kwargs)\u001b[0m\n\u001b[0;32m    311\u001b[0m \u001b[38;5;129m@wraps\u001b[39m(f)\n\u001b[0;32m    312\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mwrapped\u001b[39m(\u001b[38;5;28mself\u001b[39m, X, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m--> 313\u001b[0m     data_to_wrap \u001b[38;5;241m=\u001b[39m f(\u001b[38;5;28mself\u001b[39m, X, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    314\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(data_to_wrap, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[0;32m    315\u001b[0m         \u001b[38;5;66;03m# only wrap the first output for cross decomposition\u001b[39;00m\n\u001b[0;32m    316\u001b[0m         return_tuple \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m    317\u001b[0m             _wrap_data_with_container(method, data_to_wrap[\u001b[38;5;241m0\u001b[39m], X, \u001b[38;5;28mself\u001b[39m),\n\u001b[0;32m    318\u001b[0m             \u001b[38;5;241m*\u001b[39mdata_to_wrap[\u001b[38;5;241m1\u001b[39m:],\n\u001b[0;32m    319\u001b[0m         )\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:1473\u001b[0m, in \u001b[0;36m_fit_context.<locals>.decorator.<locals>.wrapper\u001b[1;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1466\u001b[0m     estimator\u001b[38;5;241m.\u001b[39m_validate_params()\n\u001b[0;32m   1468\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m config_context(\n\u001b[0;32m   1469\u001b[0m     skip_parameter_validation\u001b[38;5;241m=\u001b[39m(\n\u001b[0;32m   1470\u001b[0m         prefer_skip_nested_validation \u001b[38;5;129;01mor\u001b[39;00m global_skip_validation\n\u001b[0;32m   1471\u001b[0m     )\n\u001b[0;32m   1472\u001b[0m ):\n\u001b[1;32m-> 1473\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m fit_method(estimator, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\compose\\_column_transformer.py:976\u001b[0m, in \u001b[0;36mColumnTransformer.fit_transform\u001b[1;34m(self, X, y, **params)\u001b[0m\n\u001b[0;32m    973\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    974\u001b[0m     routed_params \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_empty_routing()\n\u001b[1;32m--> 976\u001b[0m result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_func_on_transformers(\n\u001b[0;32m    977\u001b[0m     X,\n\u001b[0;32m    978\u001b[0m     y,\n\u001b[0;32m    979\u001b[0m     _fit_transform_one,\n\u001b[0;32m    980\u001b[0m     column_as_labels\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[0;32m    981\u001b[0m     routed_params\u001b[38;5;241m=\u001b[39mrouted_params,\n\u001b[0;32m    982\u001b[0m )\n\u001b[0;32m    984\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m result:\n\u001b[0;32m    985\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_update_fitted_transformers([])\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\compose\\_column_transformer.py:885\u001b[0m, in \u001b[0;36mColumnTransformer._call_func_on_transformers\u001b[1;34m(self, X, y, func, column_as_labels, routed_params)\u001b[0m\n\u001b[0;32m    873\u001b[0m             extra_args \u001b[38;5;241m=\u001b[39m {}\n\u001b[0;32m    874\u001b[0m         jobs\u001b[38;5;241m.\u001b[39mappend(\n\u001b[0;32m    875\u001b[0m             delayed(func)(\n\u001b[0;32m    876\u001b[0m                 transformer\u001b[38;5;241m=\u001b[39mclone(trans) \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m fitted \u001b[38;5;28;01melse\u001b[39;00m trans,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    882\u001b[0m             )\n\u001b[0;32m    883\u001b[0m         )\n\u001b[1;32m--> 885\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m Parallel(n_jobs\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_jobs)(jobs)\n\u001b[0;32m    887\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    888\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mExpected 2D array, got 1D array instead\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mstr\u001b[39m(e):\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\utils\\parallel.py:74\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[1;34m(self, iterable)\u001b[0m\n\u001b[0;32m     69\u001b[0m config \u001b[38;5;241m=\u001b[39m get_config()\n\u001b[0;32m     70\u001b[0m iterable_with_config \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m     71\u001b[0m     (_with_config(delayed_func, config), args, kwargs)\n\u001b[0;32m     72\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m delayed_func, args, kwargs \u001b[38;5;129;01min\u001b[39;00m iterable\n\u001b[0;32m     73\u001b[0m )\n\u001b[1;32m---> 74\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__call__\u001b[39m(iterable_with_config)\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\joblib\\parallel.py:1918\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[1;34m(self, iterable)\u001b[0m\n\u001b[0;32m   1916\u001b[0m     output \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_sequential_output(iterable)\n\u001b[0;32m   1917\u001b[0m     \u001b[38;5;28mnext\u001b[39m(output)\n\u001b[1;32m-> 1918\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m output \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mreturn_generator \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28mlist\u001b[39m(output)\n\u001b[0;32m   1920\u001b[0m \u001b[38;5;66;03m# Let's create an ID that uniquely identifies the current call. If the\u001b[39;00m\n\u001b[0;32m   1921\u001b[0m \u001b[38;5;66;03m# call is interrupted early and that the same instance is immediately\u001b[39;00m\n\u001b[0;32m   1922\u001b[0m \u001b[38;5;66;03m# re-used, this id will be used to prevent workers that were\u001b[39;00m\n\u001b[0;32m   1923\u001b[0m \u001b[38;5;66;03m# concurrently finalizing a task from the previous call to run the\u001b[39;00m\n\u001b[0;32m   1924\u001b[0m \u001b[38;5;66;03m# callback.\u001b[39;00m\n\u001b[0;32m   1925\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\joblib\\parallel.py:1847\u001b[0m, in \u001b[0;36mParallel._get_sequential_output\u001b[1;34m(self, iterable)\u001b[0m\n\u001b[0;32m   1845\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_dispatched_batches \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[0;32m   1846\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_dispatched_tasks \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m-> 1847\u001b[0m res \u001b[38;5;241m=\u001b[39m func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m   1848\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_completed_tasks \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[0;32m   1849\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mprint_progress()\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\utils\\parallel.py:136\u001b[0m, in \u001b[0;36m_FuncWrapper.__call__\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    134\u001b[0m     config \u001b[38;5;241m=\u001b[39m {}\n\u001b[0;32m    135\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m config_context(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mconfig):\n\u001b[1;32m--> 136\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfunction(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\pipeline.py:1310\u001b[0m, in \u001b[0;36m_fit_transform_one\u001b[1;34m(transformer, X, y, weight, message_clsname, message, params)\u001b[0m\n\u001b[0;32m   1308\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m _print_elapsed_time(message_clsname, message):\n\u001b[0;32m   1309\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(transformer, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfit_transform\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n\u001b[1;32m-> 1310\u001b[0m         res \u001b[38;5;241m=\u001b[39m transformer\u001b[38;5;241m.\u001b[39mfit_transform(X, y, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mparams\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfit_transform\u001b[39m\u001b[38;5;124m\"\u001b[39m, {}))\n\u001b[0;32m   1311\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   1312\u001b[0m         res \u001b[38;5;241m=\u001b[39m transformer\u001b[38;5;241m.\u001b[39mfit(X, y, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mparams\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfit\u001b[39m\u001b[38;5;124m\"\u001b[39m, {}))\u001b[38;5;241m.\u001b[39mtransform(\n\u001b[0;32m   1313\u001b[0m             X, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mparams\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtransform\u001b[39m\u001b[38;5;124m\"\u001b[39m, {})\n\u001b[0;32m   1314\u001b[0m         )\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\utils\\_set_output.py:313\u001b[0m, in \u001b[0;36m_wrap_method_output.<locals>.wrapped\u001b[1;34m(self, X, *args, **kwargs)\u001b[0m\n\u001b[0;32m    311\u001b[0m \u001b[38;5;129m@wraps\u001b[39m(f)\n\u001b[0;32m    312\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mwrapped\u001b[39m(\u001b[38;5;28mself\u001b[39m, X, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m--> 313\u001b[0m     data_to_wrap \u001b[38;5;241m=\u001b[39m f(\u001b[38;5;28mself\u001b[39m, X, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    314\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(data_to_wrap, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[0;32m    315\u001b[0m         \u001b[38;5;66;03m# only wrap the first output for cross decomposition\u001b[39;00m\n\u001b[0;32m    316\u001b[0m         return_tuple \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m    317\u001b[0m             _wrap_data_with_container(method, data_to_wrap[\u001b[38;5;241m0\u001b[39m], X, \u001b[38;5;28mself\u001b[39m),\n\u001b[0;32m    318\u001b[0m             \u001b[38;5;241m*\u001b[39mdata_to_wrap[\u001b[38;5;241m1\u001b[39m:],\n\u001b[0;32m    319\u001b[0m         )\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:1101\u001b[0m, in \u001b[0;36mTransformerMixin.fit_transform\u001b[1;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[0;32m   1098\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfit(X, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mfit_params)\u001b[38;5;241m.\u001b[39mtransform(X)\n\u001b[0;32m   1099\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   1100\u001b[0m     \u001b[38;5;66;03m# fit method of arity 2 (supervised transformation)\u001b[39;00m\n\u001b[1;32m-> 1101\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfit(X, y, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mfit_params)\u001b[38;5;241m.\u001b[39mtransform(X)\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:1473\u001b[0m, in \u001b[0;36m_fit_context.<locals>.decorator.<locals>.wrapper\u001b[1;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1466\u001b[0m     estimator\u001b[38;5;241m.\u001b[39m_validate_params()\n\u001b[0;32m   1468\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m config_context(\n\u001b[0;32m   1469\u001b[0m     skip_parameter_validation\u001b[38;5;241m=\u001b[39m(\n\u001b[0;32m   1470\u001b[0m         prefer_skip_nested_validation \u001b[38;5;129;01mor\u001b[39;00m global_skip_validation\n\u001b[0;32m   1471\u001b[0m     )\n\u001b[0;32m   1472\u001b[0m ):\n\u001b[1;32m-> 1473\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m fit_method(estimator, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\preprocessing\\_encoders.py:1496\u001b[0m, in \u001b[0;36mOrdinalEncoder.fit\u001b[1;34m(self, X, y)\u001b[0m\n\u001b[0;32m   1489\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\n\u001b[0;32m   1490\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124munknown_value should only be set when \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1491\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhandle_unknown is \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124muse_encoded_value\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1492\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgot \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39munknown_value\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1493\u001b[0m     )\n\u001b[0;32m   1495\u001b[0m \u001b[38;5;66;03m# `_fit` will only raise an error when `self.handle_unknown=\"error\"`\u001b[39;00m\n\u001b[1;32m-> 1496\u001b[0m fit_results \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fit(\n\u001b[0;32m   1497\u001b[0m     X,\n\u001b[0;32m   1498\u001b[0m     handle_unknown\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandle_unknown,\n\u001b[0;32m   1499\u001b[0m     force_all_finite\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mallow-nan\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m   1500\u001b[0m     return_and_ignore_missing_for_infrequent\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m,\n\u001b[0;32m   1501\u001b[0m )\n\u001b[0;32m   1502\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_missing_indices \u001b[38;5;241m=\u001b[39m fit_results[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmissing_indices\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[0;32m   1504\u001b[0m cardinalities \u001b[38;5;241m=\u001b[39m [\u001b[38;5;28mlen\u001b[39m(categories) \u001b[38;5;28;01mfor\u001b[39;00m categories \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcategories_]\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\preprocessing\\_encoders.py:79\u001b[0m, in \u001b[0;36m_BaseEncoder._fit\u001b[1;34m(self, X, handle_unknown, force_all_finite, return_counts, return_and_ignore_missing_for_infrequent)\u001b[0m\n\u001b[0;32m     77\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_n_features(X, reset\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m     78\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_feature_names(X, reset\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m---> 79\u001b[0m X_list, n_samples, n_features \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_X(\n\u001b[0;32m     80\u001b[0m     X, force_all_finite\u001b[38;5;241m=\u001b[39mforce_all_finite\n\u001b[0;32m     81\u001b[0m )\n\u001b[0;32m     82\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_features_in_ \u001b[38;5;241m=\u001b[39m n_features\n\u001b[0;32m     84\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcategories \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mauto\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\preprocessing\\_encoders.py:45\u001b[0m, in \u001b[0;36m_BaseEncoder._check_X\u001b[1;34m(self, X, force_all_finite)\u001b[0m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m     33\u001b[0m \u001b[38;5;124;03mPerform custom check_array:\u001b[39;00m\n\u001b[0;32m     34\u001b[0m \u001b[38;5;124;03m- convert list of strings to object dtype\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     41\u001b[0m \n\u001b[0;32m     42\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m     43\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mhasattr\u001b[39m(X, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124miloc\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(X, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mndim\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;241m0\u001b[39m) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m2\u001b[39m):\n\u001b[0;32m     44\u001b[0m     \u001b[38;5;66;03m# if not a dataframe, do normal check_array validation\u001b[39;00m\n\u001b[1;32m---> 45\u001b[0m     X_temp \u001b[38;5;241m=\u001b[39m check_array(X, dtype\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, force_all_finite\u001b[38;5;241m=\u001b[39mforce_all_finite)\n\u001b[0;32m     46\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(X, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdtype\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;129;01mand\u001b[39;00m np\u001b[38;5;241m.\u001b[39missubdtype(X_temp\u001b[38;5;241m.\u001b[39mdtype, np\u001b[38;5;241m.\u001b[39mstr_):\n\u001b[0;32m     47\u001b[0m         X \u001b[38;5;241m=\u001b[39m check_array(X, dtype\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mobject\u001b[39m, force_all_finite\u001b[38;5;241m=\u001b[39mforce_all_finite)\n",
      "File \u001b[1;32m~\\miniconda3\\Lib\\site-packages\\sklearn\\utils\\validation.py:1050\u001b[0m, in \u001b[0;36mcheck_array\u001b[1;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[0;32m   1043\u001b[0m         \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   1044\u001b[0m             msg \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m   1045\u001b[0m                 \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mExpected 2D array, got 1D array instead:\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124marray=\u001b[39m\u001b[38;5;132;01m{\u001b[39;00marray\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1046\u001b[0m                 \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mReshape your data either using array.reshape(-1, 1) if \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1047\u001b[0m                 \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124myour data has a single feature or array.reshape(1, -1) \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1048\u001b[0m                 \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mif it contains a single sample.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1049\u001b[0m             )\n\u001b[1;32m-> 1050\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg)\n\u001b[0;32m   1052\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m dtype_numeric \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mhasattr\u001b[39m(array\u001b[38;5;241m.\u001b[39mdtype, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mkind\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;129;01mand\u001b[39;00m array\u001b[38;5;241m.\u001b[39mdtype\u001b[38;5;241m.\u001b[39mkind \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mUSV\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m   1053\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m   1054\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdtype=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnumeric\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m is not compatible with arrays of bytes/strings.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1055\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mConvert your data to numeric values explicitly instead.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1056\u001b[0m     )\n",
      "\u001b[1;31mValueError\u001b[0m: Expected a 2-dimensional container but got <class 'pandas.core.series.Series'> instead. Pass a DataFrame containing a single row (i.e. single sample) or a single column (i.e. single feature) instead."
     ]
    }
   ],
   "source": [
    "# Creación del modelo, profundiad de 5, algoritmo gini\n",
    "\n",
    "modelo_dt = Pipeline([\n",
    "    (\"preprocesamiento\", prep_arbol),\n",
    "    (\"arbol\", DecisionTreeClassifier(\n",
    "            max_depth         = 5,\n",
    "            criterion         = 'gini',\n",
    "            random_state      = 42\n",
    "          ))\n",
    "])\n",
    "\n",
    "# Entrenamiento del modelo\n",
    "modelo_dt.fit(X_entre_arbol, nivel_arbol_entre)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "LabelEncoder.fit_transform"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [],
   "source": [
    "nivel_entre_dt_pred = modelo_dt.predict(X_entre_arbol)\n",
    "nivel_prueba_dt_pred = modelo_dt.predict(X_prueba_arbol)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " ## Prueba del Modelo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'metrics' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m acc_entre \u001b[38;5;241m=\u001b[39m metrics\u001b[38;5;241m.\u001b[39maccuracy_score(nivel_arbol_entre, nivel_entre_dt_pred)\n\u001b[0;32m      2\u001b[0m acc_prueba \u001b[38;5;241m=\u001b[39m metrics\u001b[38;5;241m.\u001b[39maccuracy_score(nivel_arbol_prueba, nivel_prueba_dt_pred)\n\u001b[0;32m      4\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mexactitud entrenamiento: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00macc_entre\u001b[38;5;132;01m:\u001b[39;00m\u001b[38;5;124m0.3f\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m, )\n",
      "\u001b[1;31mNameError\u001b[0m: name 'metrics' is not defined"
     ]
    }
   ],
   "source": [
    "acc_entre = metrics.accuracy_score(nivel_arbol_entre, nivel_entre_dt_pred)\n",
    "acc_prueba = metrics.accuracy_score(nivel_arbol_prueba, nivel_prueba_dt_pred)\n",
    "\n",
    "print(f\"exactitud entrenamiento: {acc_entre:0.3f}\", )\n",
    "print(f\"exactitud prueba: {acc_prueba:0.3f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 400x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "matriz_confusion(nivel_arbol_prueba, nivel_prueba_dt_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.82      0.86      0.84        57\n",
      "         1.0       0.95      0.93      0.94       151\n",
      "\n",
      "    accuracy                           0.91       208\n",
      "   macro avg       0.88      0.89      0.89       208\n",
      "weighted avg       0.91      0.91      0.91       208\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(metrics.classification_report(nivel_arbol_prueba, nivel_prueba_dt_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "archivo = \"tree.dot\"\n",
    "\n",
    "export_graphviz(modelo_dt, \n",
    "                out_file=archivo, \n",
    "                feature_names=X_prueba.columns, \n",
    "                class_names=[\"Prod Bajo\", \"Prod Alto\"],\n",
    "                rounded=True, filled=True)\n",
    "\n",
    "with open(archivo, \"r\") as rf:\n",
    "    dot_graph = rf.read()\n",
    "    \n",
    "grf = graphviz.Source(dot_graph, format=\"png\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 12.0.0 (20240704.0754)\n",
       " -->\n",
       "<!-- Title: Tree Pages: 1 -->\n",
       "<svg width=\"2023pt\" height=\"715pt\"\n",
       " viewBox=\"0.00 0.00 2022.88 714.50\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 710.5)\">\n",
       "<title>Tree</title>\n",
       "<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-710.5 2018.88,-710.5 2018.88,4 -4,4\"/>\n",
       "<!-- 0 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>0</title>\n",
       "<path fill=\"#83c1ef\" stroke=\"black\" d=\"M985,-706.5C985,-706.5 876.75,-706.5 876.75,-706.5 870.75,-706.5 864.75,-700.5 864.75,-694.5 864.75,-694.5 864.75,-628 864.75,-628 864.75,-622 870.75,-616 876.75,-616 876.75,-616 985,-616 985,-616 991,-616 997,-622 997,-628 997,-628 997,-694.5 997,-694.5 997,-700.5 991,-706.5 985,-706.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"930.88\" y=\"-689.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">incentive &lt;= 0.243</text>\n",
       "<text text-anchor=\"middle\" x=\"930.88\" y=\"-672.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.395</text>\n",
       "<text text-anchor=\"middle\" x=\"930.88\" y=\"-656.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 483</text>\n",
       "<text text-anchor=\"middle\" x=\"930.88\" y=\"-639.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [131, 352]</text>\n",
       "<text text-anchor=\"middle\" x=\"930.88\" y=\"-623.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Alto</text>\n",
       "</g>\n",
       "<!-- 1 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>1</title>\n",
       "<path fill=\"#eca16b\" stroke=\"black\" d=\"M780.25,-580C780.25,-580 595.5,-580 595.5,-580 589.5,-580 583.5,-574 583.5,-568 583.5,-568 583.5,-501.5 583.5,-501.5 583.5,-495.5 589.5,-489.5 595.5,-489.5 595.5,-489.5 780.25,-489.5 780.25,-489.5 786.25,-489.5 792.25,-495.5 792.25,-501.5 792.25,-501.5 792.25,-568 792.25,-568 792.25,-574 786.25,-580 780.25,-580\"/>\n",
       "<text text-anchor=\"middle\" x=\"687.88\" y=\"-562.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">targeted_productivity &lt;= 0.829</text>\n",
       "<text text-anchor=\"middle\" x=\"687.88\" y=\"-546.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.323</text>\n",
       "<text text-anchor=\"middle\" x=\"687.88\" y=\"-529.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 143</text>\n",
       "<text text-anchor=\"middle\" x=\"687.88\" y=\"-513.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [114, 29]</text>\n",
       "<text text-anchor=\"middle\" x=\"687.88\" y=\"-496.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;1 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>0&#45;&gt;1</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M864.47,-626.23C840.05,-613.72 811.86,-599.27 785.27,-585.65\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"787.02,-582.61 776.52,-581.17 783.83,-588.84 787.02,-582.61\"/>\n",
       "<text text-anchor=\"middle\" x=\"782.85\" y=\"-599.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">True</text>\n",
       "</g>\n",
       "<!-- 20 -->\n",
       "<g id=\"node21\" class=\"node\">\n",
       "<title>20</title>\n",
       "<path fill=\"#43a2e6\" stroke=\"black\" d=\"M1327.25,-580C1327.25,-580 1142.5,-580 1142.5,-580 1136.5,-580 1130.5,-574 1130.5,-568 1130.5,-568 1130.5,-501.5 1130.5,-501.5 1130.5,-495.5 1136.5,-489.5 1142.5,-489.5 1142.5,-489.5 1327.25,-489.5 1327.25,-489.5 1333.25,-489.5 1339.25,-495.5 1339.25,-501.5 1339.25,-501.5 1339.25,-568 1339.25,-568 1339.25,-574 1333.25,-580 1327.25,-580\"/>\n",
       "<text text-anchor=\"middle\" x=\"1234.88\" y=\"-562.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">targeted_productivity &lt;= 0.829</text>\n",
       "<text text-anchor=\"middle\" x=\"1234.88\" y=\"-546.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.095</text>\n",
       "<text text-anchor=\"middle\" x=\"1234.88\" y=\"-529.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 340</text>\n",
       "<text text-anchor=\"middle\" x=\"1234.88\" y=\"-513.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [17, 323]</text>\n",
       "<text text-anchor=\"middle\" x=\"1234.88\" y=\"-496.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Alto</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;20 -->\n",
       "<g id=\"edge20\" class=\"edge\">\n",
       "<title>0&#45;&gt;20</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M997.21,-633.08C1033.05,-618.41 1078.31,-599.87 1119.7,-582.92\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1120.81,-586.25 1128.73,-579.22 1118.15,-579.77 1120.81,-586.25\"/>\n",
       "<text text-anchor=\"middle\" x=\"1120.48\" y=\"-596.65\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">False</text>\n",
       "</g>\n",
       "<!-- 2 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>2</title>\n",
       "<path fill=\"#e5833c\" stroke=\"black\" d=\"M294.62,-453.5C294.62,-453.5 151.12,-453.5 151.12,-453.5 145.12,-453.5 139.12,-447.5 139.12,-441.5 139.12,-441.5 139.12,-375 139.12,-375 139.12,-369 145.12,-363 151.12,-363 151.12,-363 294.62,-363 294.62,-363 300.62,-363 306.62,-369 306.62,-375 306.62,-375 306.62,-441.5 306.62,-441.5 306.62,-447.5 300.62,-453.5 294.62,-453.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"222.88\" y=\"-436.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">day_Wednesday &lt;= 0.5</text>\n",
       "<text text-anchor=\"middle\" x=\"222.88\" y=\"-419.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.028</text>\n",
       "<text text-anchor=\"middle\" x=\"222.88\" y=\"-403.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 71</text>\n",
       "<text text-anchor=\"middle\" x=\"222.88\" y=\"-386.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [70, 1]</text>\n",
       "<text text-anchor=\"middle\" x=\"222.88\" y=\"-370.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 1&#45;&gt;2 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>1&#45;&gt;2</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M583.23,-505.73C503.55,-484.4 394.8,-455.28 317.67,-434.63\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"319.02,-431.37 308.46,-432.16 317.21,-438.13 319.02,-431.37\"/>\n",
       "</g>\n",
       "<!-- 7 -->\n",
       "<g id=\"node8\" class=\"node\">\n",
       "<title>7</title>\n",
       "<path fill=\"#f6d1b7\" stroke=\"black\" d=\"M742,-453.5C742,-453.5 633.75,-453.5 633.75,-453.5 627.75,-453.5 621.75,-447.5 621.75,-441.5 621.75,-441.5 621.75,-375 621.75,-375 621.75,-369 627.75,-363 633.75,-363 633.75,-363 742,-363 742,-363 748,-363 754,-369 754,-375 754,-375 754,-441.5 754,-441.5 754,-447.5 748,-453.5 742,-453.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"687.88\" y=\"-436.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">incentive &lt;= 0.207</text>\n",
       "<text text-anchor=\"middle\" x=\"687.88\" y=\"-419.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.475</text>\n",
       "<text text-anchor=\"middle\" x=\"687.88\" y=\"-403.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 72</text>\n",
       "<text text-anchor=\"middle\" x=\"687.88\" y=\"-386.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [44, 28]</text>\n",
       "<text text-anchor=\"middle\" x=\"687.88\" y=\"-370.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 1&#45;&gt;7 -->\n",
       "<g id=\"edge7\" class=\"edge\">\n",
       "<title>1&#45;&gt;7</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M687.88,-489.15C687.88,-481.47 687.88,-473.39 687.88,-465.44\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"691.38,-465.47 687.88,-455.47 684.38,-465.47 691.38,-465.47\"/>\n",
       "</g>\n",
       "<!-- 3 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>3</title>\n",
       "<path fill=\"#e58139\" stroke=\"black\" d=\"M115.75,-318.75C115.75,-318.75 12,-318.75 12,-318.75 6,-318.75 0,-312.75 0,-306.75 0,-306.75 0,-256.75 0,-256.75 0,-250.75 6,-244.75 12,-244.75 12,-244.75 115.75,-244.75 115.75,-244.75 121.75,-244.75 127.75,-250.75 127.75,-256.75 127.75,-256.75 127.75,-306.75 127.75,-306.75 127.75,-312.75 121.75,-318.75 115.75,-318.75\"/>\n",
       "<text text-anchor=\"middle\" x=\"63.88\" y=\"-301.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"63.88\" y=\"-284.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 61</text>\n",
       "<text text-anchor=\"middle\" x=\"63.88\" y=\"-268.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [61, 0]</text>\n",
       "<text text-anchor=\"middle\" x=\"63.88\" y=\"-251.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 2&#45;&gt;3 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>2&#45;&gt;3</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M165.92,-362.65C150.65,-350.7 134.17,-337.79 119,-325.92\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"121.46,-323.4 111.43,-319.99 117.15,-328.91 121.46,-323.4\"/>\n",
       "</g>\n",
       "<!-- 4 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>4</title>\n",
       "<path fill=\"#e88f4f\" stroke=\"black\" d=\"M288.25,-327C288.25,-327 157.5,-327 157.5,-327 151.5,-327 145.5,-321 145.5,-315 145.5,-315 145.5,-248.5 145.5,-248.5 145.5,-242.5 151.5,-236.5 157.5,-236.5 157.5,-236.5 288.25,-236.5 288.25,-236.5 294.25,-236.5 300.25,-242.5 300.25,-248.5 300.25,-248.5 300.25,-315 300.25,-315 300.25,-321 294.25,-327 288.25,-327\"/>\n",
       "<text text-anchor=\"middle\" x=\"222.88\" y=\"-309.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">no_of_workers &lt;= 0.5</text>\n",
       "<text text-anchor=\"middle\" x=\"222.88\" y=\"-293.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.18</text>\n",
       "<text text-anchor=\"middle\" x=\"222.88\" y=\"-276.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 10</text>\n",
       "<text text-anchor=\"middle\" x=\"222.88\" y=\"-260.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [9, 1]</text>\n",
       "<text text-anchor=\"middle\" x=\"222.88\" y=\"-243.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 2&#45;&gt;4 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>2&#45;&gt;4</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M222.88,-362.65C222.88,-354.97 222.88,-346.89 222.88,-338.94\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"226.38,-338.97 222.88,-328.97 219.38,-338.97 226.38,-338.97\"/>\n",
       "</g>\n",
       "<!-- 5 -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>5</title>\n",
       "<path fill=\"#e58139\" stroke=\"black\" d=\"M130.75,-192.25C130.75,-192.25 27,-192.25 27,-192.25 21,-192.25 15,-186.25 15,-180.25 15,-180.25 15,-130.25 15,-130.25 15,-124.25 21,-118.25 27,-118.25 27,-118.25 130.75,-118.25 130.75,-118.25 136.75,-118.25 142.75,-124.25 142.75,-130.25 142.75,-130.25 142.75,-180.25 142.75,-180.25 142.75,-186.25 136.75,-192.25 130.75,-192.25\"/>\n",
       "<text text-anchor=\"middle\" x=\"78.88\" y=\"-174.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"78.88\" y=\"-158.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 9</text>\n",
       "<text text-anchor=\"middle\" x=\"78.88\" y=\"-141.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [9, 0]</text>\n",
       "<text text-anchor=\"middle\" x=\"78.88\" y=\"-125.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 4&#45;&gt;5 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>4&#45;&gt;5</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M171.29,-236.15C157.53,-224.25 142.67,-211.41 128.99,-199.58\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"131.63,-197.24 121.78,-193.35 127.06,-202.53 131.63,-197.24\"/>\n",
       "</g>\n",
       "<!-- 6 -->\n",
       "<g id=\"node7\" class=\"node\">\n",
       "<title>6</title>\n",
       "<path fill=\"#399de5\" stroke=\"black\" d=\"M272.88,-192.25C272.88,-192.25 172.88,-192.25 172.88,-192.25 166.88,-192.25 160.88,-186.25 160.88,-180.25 160.88,-180.25 160.88,-130.25 160.88,-130.25 160.88,-124.25 166.88,-118.25 172.88,-118.25 172.88,-118.25 272.88,-118.25 272.88,-118.25 278.88,-118.25 284.88,-124.25 284.88,-130.25 284.88,-130.25 284.88,-180.25 284.88,-180.25 284.88,-186.25 278.88,-192.25 272.88,-192.25\"/>\n",
       "<text text-anchor=\"middle\" x=\"222.88\" y=\"-174.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"222.88\" y=\"-158.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"222.88\" y=\"-141.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1]</text>\n",
       "<text text-anchor=\"middle\" x=\"222.88\" y=\"-125.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Alto</text>\n",
       "</g>\n",
       "<!-- 4&#45;&gt;6 -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>4&#45;&gt;6</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M222.88,-236.15C222.88,-225.6 222.88,-214.31 222.88,-203.63\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"226.38,-203.87 222.88,-193.87 219.38,-203.87 226.38,-203.87\"/>\n",
       "</g>\n",
       "<!-- 8 -->\n",
       "<g id=\"node9\" class=\"node\">\n",
       "<title>8</title>\n",
       "<path fill=\"#edaa79\" stroke=\"black\" d=\"M647.75,-327C647.75,-327 532,-327 532,-327 526,-327 520,-321 520,-315 520,-315 520,-248.5 520,-248.5 520,-242.5 526,-236.5 532,-236.5 532,-236.5 647.75,-236.5 647.75,-236.5 653.75,-236.5 659.75,-242.5 659.75,-248.5 659.75,-248.5 659.75,-315 659.75,-315 659.75,-321 653.75,-327 647.75,-327\"/>\n",
       "<text text-anchor=\"middle\" x=\"589.88\" y=\"-309.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">over_time &lt;= 0.132</text>\n",
       "<text text-anchor=\"middle\" x=\"589.88\" y=\"-293.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.37</text>\n",
       "<text text-anchor=\"middle\" x=\"589.88\" y=\"-276.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 49</text>\n",
       "<text text-anchor=\"middle\" x=\"589.88\" y=\"-260.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [37, 12]</text>\n",
       "<text text-anchor=\"middle\" x=\"589.88\" y=\"-243.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 7&#45;&gt;8 -->\n",
       "<g id=\"edge8\" class=\"edge\">\n",
       "<title>7&#45;&gt;8</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M652.77,-362.65C646.09,-354.16 639.03,-345.19 632.14,-336.45\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"634.93,-334.33 626,-328.64 629.43,-338.66 634.93,-334.33\"/>\n",
       "</g>\n",
       "<!-- 15 -->\n",
       "<g id=\"node16\" class=\"node\">\n",
       "<title>15</title>\n",
       "<path fill=\"#90c8f0\" stroke=\"black\" d=\"M844.75,-327C844.75,-327 729,-327 729,-327 723,-327 717,-321 717,-315 717,-315 717,-248.5 717,-248.5 717,-242.5 723,-236.5 729,-236.5 729,-236.5 844.75,-236.5 844.75,-236.5 850.75,-236.5 856.75,-242.5 856.75,-248.5 856.75,-248.5 856.75,-315 856.75,-315 856.75,-321 850.75,-327 844.75,-327\"/>\n",
       "<text text-anchor=\"middle\" x=\"786.88\" y=\"-309.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">over_time &lt;= 0.292</text>\n",
       "<text text-anchor=\"middle\" x=\"786.88\" y=\"-293.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.423</text>\n",
       "<text text-anchor=\"middle\" x=\"786.88\" y=\"-276.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 23</text>\n",
       "<text text-anchor=\"middle\" x=\"786.88\" y=\"-260.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [7, 16]</text>\n",
       "<text text-anchor=\"middle\" x=\"786.88\" y=\"-243.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Alto</text>\n",
       "</g>\n",
       "<!-- 7&#45;&gt;15 -->\n",
       "<g id=\"edge15\" class=\"edge\">\n",
       "<title>7&#45;&gt;15</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M723.34,-362.65C730.09,-354.16 737.22,-345.19 744.17,-336.45\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"746.9,-338.64 750.39,-328.64 741.42,-334.29 746.9,-338.64\"/>\n",
       "</g>\n",
       "<!-- 9 -->\n",
       "<g id=\"node10\" class=\"node\">\n",
       "<title>9</title>\n",
       "<path fill=\"#9ccef2\" stroke=\"black\" d=\"M425.12,-200.5C425.12,-200.5 314.62,-200.5 314.62,-200.5 308.62,-200.5 302.62,-194.5 302.62,-188.5 302.62,-188.5 302.62,-122 302.62,-122 302.62,-116 308.62,-110 314.62,-110 314.62,-110 425.12,-110 425.12,-110 431.12,-110 437.12,-116 437.12,-122 437.12,-122 437.12,-188.5 437.12,-188.5 437.12,-194.5 431.12,-200.5 425.12,-200.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"369.88\" y=\"-183.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">idle_time &lt;= 0.007</text>\n",
       "<text text-anchor=\"middle\" x=\"369.88\" y=\"-166.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.444</text>\n",
       "<text text-anchor=\"middle\" x=\"369.88\" y=\"-150.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 6</text>\n",
       "<text text-anchor=\"middle\" x=\"369.88\" y=\"-133.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 4]</text>\n",
       "<text text-anchor=\"middle\" x=\"369.88\" y=\"-117.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Alto</text>\n",
       "</g>\n",
       "<!-- 8&#45;&gt;9 -->\n",
       "<g id=\"edge9\" class=\"edge\">\n",
       "<title>8&#45;&gt;9</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M519.66,-241.02C496.66,-228 470.99,-213.47 447.48,-200.17\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"449.29,-197.17 438.86,-195.29 445.84,-203.26 449.29,-197.17\"/>\n",
       "</g>\n",
       "<!-- 12 -->\n",
       "<g id=\"node13\" class=\"node\">\n",
       "<title>12</title>\n",
       "<path fill=\"#eb9e66\" stroke=\"black\" d=\"M676.62,-200.5C676.62,-200.5 503.12,-200.5 503.12,-200.5 497.12,-200.5 491.12,-194.5 491.12,-188.5 491.12,-188.5 491.12,-122 491.12,-122 491.12,-116 497.12,-110 503.12,-110 503.12,-110 676.62,-110 676.62,-110 682.62,-110 688.62,-116 688.62,-122 688.62,-122 688.62,-188.5 688.62,-188.5 688.62,-194.5 682.62,-200.5 676.62,-200.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"589.88\" y=\"-183.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">no_of_style_change &lt;= 0.25</text>\n",
       "<text text-anchor=\"middle\" x=\"589.88\" y=\"-166.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.303</text>\n",
       "<text text-anchor=\"middle\" x=\"589.88\" y=\"-150.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 43</text>\n",
       "<text text-anchor=\"middle\" x=\"589.88\" y=\"-133.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [35, 8]</text>\n",
       "<text text-anchor=\"middle\" x=\"589.88\" y=\"-117.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 8&#45;&gt;12 -->\n",
       "<g id=\"edge12\" class=\"edge\">\n",
       "<title>8&#45;&gt;12</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M589.88,-236.15C589.88,-228.47 589.88,-220.39 589.88,-212.44\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"593.38,-212.47 589.88,-202.47 586.38,-212.47 593.38,-212.47\"/>\n",
       "</g>\n",
       "<!-- 10 -->\n",
       "<g id=\"node11\" class=\"node\">\n",
       "<title>10</title>\n",
       "<path fill=\"#399de5\" stroke=\"black\" d=\"M261.88,-74C261.88,-74 161.88,-74 161.88,-74 155.88,-74 149.88,-68 149.88,-62 149.88,-62 149.88,-12 149.88,-12 149.88,-6 155.88,0 161.88,0 161.88,0 261.88,0 261.88,0 267.88,0 273.88,-6 273.88,-12 273.88,-12 273.88,-62 273.88,-62 273.88,-68 267.88,-74 261.88,-74\"/>\n",
       "<text text-anchor=\"middle\" x=\"211.88\" y=\"-56.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"211.88\" y=\"-40.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 4</text>\n",
       "<text text-anchor=\"middle\" x=\"211.88\" y=\"-23.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 4]</text>\n",
       "<text text-anchor=\"middle\" x=\"211.88\" y=\"-7.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Alto</text>\n",
       "</g>\n",
       "<!-- 9&#45;&gt;10 -->\n",
       "<g id=\"edge10\" class=\"edge\">\n",
       "<title>9&#45;&gt;10</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M309.24,-109.64C296.49,-100.26 283.07,-90.39 270.41,-81.07\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"272.69,-78.4 262.56,-75.29 268.54,-84.04 272.69,-78.4\"/>\n",
       "</g>\n",
       "<!-- 11 -->\n",
       "<g id=\"node12\" class=\"node\">\n",
       "<title>11</title>\n",
       "<path fill=\"#e58139\" stroke=\"black\" d=\"M407.75,-74C407.75,-74 304,-74 304,-74 298,-74 292,-68 292,-62 292,-62 292,-12 292,-12 292,-6 298,0 304,0 304,0 407.75,0 407.75,0 413.75,0 419.75,-6 419.75,-12 419.75,-12 419.75,-62 419.75,-62 419.75,-68 413.75,-74 407.75,-74\"/>\n",
       "<text text-anchor=\"middle\" x=\"355.88\" y=\"-56.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"355.88\" y=\"-40.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"355.88\" y=\"-23.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 0]</text>\n",
       "<text text-anchor=\"middle\" x=\"355.88\" y=\"-7.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 9&#45;&gt;11 -->\n",
       "<g id=\"edge11\" class=\"edge\">\n",
       "<title>9&#45;&gt;11</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M364.5,-109.64C363.56,-101.81 362.57,-93.63 361.62,-85.72\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"365.11,-85.41 360.44,-75.9 358.16,-86.24 365.11,-85.41\"/>\n",
       "</g>\n",
       "<!-- 13 -->\n",
       "<g id=\"node14\" class=\"node\">\n",
       "<title>13</title>\n",
       "<path fill=\"#e89051\" stroke=\"black\" d=\"M553.75,-74C553.75,-74 450,-74 450,-74 444,-74 438,-68 438,-62 438,-62 438,-12 438,-12 438,-6 444,0 450,0 450,0 553.75,0 553.75,0 559.75,0 565.75,-6 565.75,-12 565.75,-12 565.75,-62 565.75,-62 565.75,-68 559.75,-74 553.75,-74\"/>\n",
       "<text text-anchor=\"middle\" x=\"501.88\" y=\"-56.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.191</text>\n",
       "<text text-anchor=\"middle\" x=\"501.88\" y=\"-40.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 28</text>\n",
       "<text text-anchor=\"middle\" x=\"501.88\" y=\"-23.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [25, 3]</text>\n",
       "<text text-anchor=\"middle\" x=\"501.88\" y=\"-7.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 12&#45;&gt;13 -->\n",
       "<g id=\"edge13\" class=\"edge\">\n",
       "<title>12&#45;&gt;13</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M556.1,-109.64C549.63,-101.08 542.83,-92.11 536.33,-83.52\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"539.16,-81.46 530.34,-75.6 533.58,-85.69 539.16,-81.46\"/>\n",
       "</g>\n",
       "<!-- 14 -->\n",
       "<g id=\"node15\" class=\"node\">\n",
       "<title>14</title>\n",
       "<path fill=\"#f2c09c\" stroke=\"black\" d=\"M699.75,-74C699.75,-74 596,-74 596,-74 590,-74 584,-68 584,-62 584,-62 584,-12 584,-12 584,-6 590,0 596,0 596,0 699.75,0 699.75,0 705.75,0 711.75,-6 711.75,-12 711.75,-12 711.75,-62 711.75,-62 711.75,-68 705.75,-74 699.75,-74\"/>\n",
       "<text text-anchor=\"middle\" x=\"647.88\" y=\"-56.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.444</text>\n",
       "<text text-anchor=\"middle\" x=\"647.88\" y=\"-40.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 15</text>\n",
       "<text text-anchor=\"middle\" x=\"647.88\" y=\"-23.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [10, 5]</text>\n",
       "<text text-anchor=\"middle\" x=\"647.88\" y=\"-7.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 12&#45;&gt;14 -->\n",
       "<g id=\"edge14\" class=\"edge\">\n",
       "<title>12&#45;&gt;14</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M612.13,-109.64C616.22,-101.44 620.5,-92.87 624.62,-84.62\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"627.71,-86.26 629.04,-75.75 621.45,-83.13 627.71,-86.26\"/>\n",
       "</g>\n",
       "<!-- 16 -->\n",
       "<g id=\"node17\" class=\"node\">\n",
       "<title>16</title>\n",
       "<path fill=\"#6ab6ec\" stroke=\"black\" d=\"M836.88,-200.5C836.88,-200.5 736.88,-200.5 736.88,-200.5 730.88,-200.5 724.88,-194.5 724.88,-188.5 724.88,-188.5 724.88,-122 724.88,-122 724.88,-116 730.88,-110 736.88,-110 736.88,-110 836.88,-110 836.88,-110 842.88,-110 848.88,-116 848.88,-122 848.88,-122 848.88,-188.5 848.88,-188.5 848.88,-194.5 842.88,-200.5 836.88,-200.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"786.88\" y=\"-183.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">wip &lt;= 0.069</text>\n",
       "<text text-anchor=\"middle\" x=\"786.88\" y=\"-166.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.32</text>\n",
       "<text text-anchor=\"middle\" x=\"786.88\" y=\"-150.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 20</text>\n",
       "<text text-anchor=\"middle\" x=\"786.88\" y=\"-133.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [4, 16]</text>\n",
       "<text text-anchor=\"middle\" x=\"786.88\" y=\"-117.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Alto</text>\n",
       "</g>\n",
       "<!-- 15&#45;&gt;16 -->\n",
       "<g id=\"edge16\" class=\"edge\">\n",
       "<title>15&#45;&gt;16</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M786.88,-236.15C786.88,-228.47 786.88,-220.39 786.88,-212.44\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"790.38,-212.47 786.88,-202.47 783.38,-212.47 790.38,-212.47\"/>\n",
       "</g>\n",
       "<!-- 19 -->\n",
       "<g id=\"node20\" class=\"node\">\n",
       "<title>19</title>\n",
       "<path fill=\"#e58139\" stroke=\"black\" d=\"M982.75,-192.25C982.75,-192.25 879,-192.25 879,-192.25 873,-192.25 867,-186.25 867,-180.25 867,-180.25 867,-130.25 867,-130.25 867,-124.25 873,-118.25 879,-118.25 879,-118.25 982.75,-118.25 982.75,-118.25 988.75,-118.25 994.75,-124.25 994.75,-130.25 994.75,-130.25 994.75,-180.25 994.75,-180.25 994.75,-186.25 988.75,-192.25 982.75,-192.25\"/>\n",
       "<text text-anchor=\"middle\" x=\"930.88\" y=\"-174.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"930.88\" y=\"-158.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"930.88\" y=\"-141.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 0]</text>\n",
       "<text text-anchor=\"middle\" x=\"930.88\" y=\"-125.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 15&#45;&gt;19 -->\n",
       "<g id=\"edge19\" class=\"edge\">\n",
       "<title>15&#45;&gt;19</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M838.46,-236.15C852.22,-224.25 867.08,-211.41 880.76,-199.58\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"882.69,-202.53 887.97,-193.35 878.12,-197.24 882.69,-202.53\"/>\n",
       "</g>\n",
       "<!-- 17 -->\n",
       "<g id=\"node18\" class=\"node\">\n",
       "<title>17</title>\n",
       "<path fill=\"#53aae8\" stroke=\"black\" d=\"M841.88,-74C841.88,-74 741.88,-74 741.88,-74 735.88,-74 729.88,-68 729.88,-62 729.88,-62 729.88,-12 729.88,-12 729.88,-6 735.88,0 741.88,0 741.88,0 841.88,0 841.88,0 847.88,0 853.88,-6 853.88,-12 853.88,-12 853.88,-62 853.88,-62 853.88,-68 847.88,-74 841.88,-74\"/>\n",
       "<text text-anchor=\"middle\" x=\"791.88\" y=\"-56.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.208</text>\n",
       "<text text-anchor=\"middle\" x=\"791.88\" y=\"-40.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 17</text>\n",
       "<text text-anchor=\"middle\" x=\"791.88\" y=\"-23.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 15]</text>\n",
       "<text text-anchor=\"middle\" x=\"791.88\" y=\"-7.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Alto</text>\n",
       "</g>\n",
       "<!-- 16&#45;&gt;17 -->\n",
       "<g id=\"edge17\" class=\"edge\">\n",
       "<title>16&#45;&gt;17</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M788.79,-109.64C789.13,-101.81 789.48,-93.63 789.82,-85.72\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"793.31,-86.05 790.24,-75.91 786.32,-85.75 793.31,-86.05\"/>\n",
       "</g>\n",
       "<!-- 18 -->\n",
       "<g id=\"node19\" class=\"node\">\n",
       "<title>18</title>\n",
       "<path fill=\"#f2c09c\" stroke=\"black\" d=\"M987.75,-74C987.75,-74 884,-74 884,-74 878,-74 872,-68 872,-62 872,-62 872,-12 872,-12 872,-6 878,0 884,0 884,0 987.75,0 987.75,0 993.75,0 999.75,-6 999.75,-12 999.75,-12 999.75,-62 999.75,-62 999.75,-68 993.75,-74 987.75,-74\"/>\n",
       "<text text-anchor=\"middle\" x=\"935.88\" y=\"-56.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.444</text>\n",
       "<text text-anchor=\"middle\" x=\"935.88\" y=\"-40.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"935.88\" y=\"-23.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [2, 1]</text>\n",
       "<text text-anchor=\"middle\" x=\"935.88\" y=\"-7.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 16&#45;&gt;18 -->\n",
       "<g id=\"edge18\" class=\"edge\">\n",
       "<title>16&#45;&gt;18</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M844.06,-109.64C855.96,-100.35 868.49,-90.58 880.33,-81.34\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"882.3,-84.24 888.04,-75.32 878,-78.72 882.3,-84.24\"/>\n",
       "</g>\n",
       "<!-- 21 -->\n",
       "<g id=\"node22\" class=\"node\">\n",
       "<title>21</title>\n",
       "<path fill=\"#f6d5bd\" stroke=\"black\" d=\"M1289,-453.5C1289,-453.5 1180.75,-453.5 1180.75,-453.5 1174.75,-453.5 1168.75,-447.5 1168.75,-441.5 1168.75,-441.5 1168.75,-375 1168.75,-375 1168.75,-369 1174.75,-363 1180.75,-363 1180.75,-363 1289,-363 1289,-363 1295,-363 1301,-369 1301,-375 1301,-375 1301,-441.5 1301,-441.5 1301,-447.5 1295,-453.5 1289,-453.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1234.88\" y=\"-436.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">incentive &lt;= 0.377</text>\n",
       "<text text-anchor=\"middle\" x=\"1234.88\" y=\"-419.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.48</text>\n",
       "<text text-anchor=\"middle\" x=\"1234.88\" y=\"-403.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 15</text>\n",
       "<text text-anchor=\"middle\" x=\"1234.88\" y=\"-386.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [9, 6]</text>\n",
       "<text text-anchor=\"middle\" x=\"1234.88\" y=\"-370.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 20&#45;&gt;21 -->\n",
       "<g id=\"edge21\" class=\"edge\">\n",
       "<title>20&#45;&gt;21</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1234.88,-489.15C1234.88,-481.47 1234.88,-473.39 1234.88,-465.44\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1238.38,-465.47 1234.88,-455.47 1231.38,-465.47 1238.38,-465.47\"/>\n",
       "</g>\n",
       "<!-- 28 -->\n",
       "<g id=\"node29\" class=\"node\">\n",
       "<title>28</title>\n",
       "<path fill=\"#3e9fe6\" stroke=\"black\" d=\"M1633.88,-453.5C1633.88,-453.5 1533.88,-453.5 1533.88,-453.5 1527.88,-453.5 1521.88,-447.5 1521.88,-441.5 1521.88,-441.5 1521.88,-375 1521.88,-375 1521.88,-369 1527.88,-363 1533.88,-363 1533.88,-363 1633.88,-363 1633.88,-363 1639.88,-363 1645.88,-369 1645.88,-375 1645.88,-375 1645.88,-441.5 1645.88,-441.5 1645.88,-447.5 1639.88,-453.5 1633.88,-453.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1583.88\" y=\"-436.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">smv &lt;= 0.454</text>\n",
       "<text text-anchor=\"middle\" x=\"1583.88\" y=\"-419.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.048</text>\n",
       "<text text-anchor=\"middle\" x=\"1583.88\" y=\"-403.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 325</text>\n",
       "<text text-anchor=\"middle\" x=\"1583.88\" y=\"-386.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [8, 317]</text>\n",
       "<text text-anchor=\"middle\" x=\"1583.88\" y=\"-370.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Alto</text>\n",
       "</g>\n",
       "<!-- 20&#45;&gt;28 -->\n",
       "<g id=\"edge28\" class=\"edge\">\n",
       "<title>20&#45;&gt;28</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1339.59,-496.4C1394.86,-476.68 1461.32,-452.97 1510.96,-435.26\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1511.93,-438.63 1520.18,-431.97 1509.58,-432.04 1511.93,-438.63\"/>\n",
       "</g>\n",
       "<!-- 22 -->\n",
       "<g id=\"node23\" class=\"node\">\n",
       "<title>22</title>\n",
       "<path fill=\"#eb9d65\" stroke=\"black\" d=\"M1225,-327C1225,-327 1080.75,-327 1080.75,-327 1074.75,-327 1068.75,-321 1068.75,-315 1068.75,-315 1068.75,-248.5 1068.75,-248.5 1068.75,-242.5 1074.75,-236.5 1080.75,-236.5 1080.75,-236.5 1225,-236.5 1225,-236.5 1231,-236.5 1237,-242.5 1237,-248.5 1237,-248.5 1237,-315 1237,-315 1237,-321 1231,-327 1225,-327\"/>\n",
       "<text text-anchor=\"middle\" x=\"1152.88\" y=\"-309.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">quarter_Quarter1 &lt;= 0.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1152.88\" y=\"-293.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.298</text>\n",
       "<text text-anchor=\"middle\" x=\"1152.88\" y=\"-276.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 11</text>\n",
       "<text text-anchor=\"middle\" x=\"1152.88\" y=\"-260.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [9, 2]</text>\n",
       "<text text-anchor=\"middle\" x=\"1152.88\" y=\"-243.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 21&#45;&gt;22 -->\n",
       "<g id=\"edge22\" class=\"edge\">\n",
       "<title>21&#45;&gt;22</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1205.5,-362.65C1200.03,-354.34 1194.25,-345.57 1188.61,-337\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1191.57,-335.14 1183.15,-328.72 1185.73,-338.99 1191.57,-335.14\"/>\n",
       "</g>\n",
       "<!-- 27 -->\n",
       "<g id=\"node28\" class=\"node\">\n",
       "<title>27</title>\n",
       "<path fill=\"#399de5\" stroke=\"black\" d=\"M1366.88,-318.75C1366.88,-318.75 1266.88,-318.75 1266.88,-318.75 1260.88,-318.75 1254.88,-312.75 1254.88,-306.75 1254.88,-306.75 1254.88,-256.75 1254.88,-256.75 1254.88,-250.75 1260.88,-244.75 1266.88,-244.75 1266.88,-244.75 1366.88,-244.75 1366.88,-244.75 1372.88,-244.75 1378.88,-250.75 1378.88,-256.75 1378.88,-256.75 1378.88,-306.75 1378.88,-306.75 1378.88,-312.75 1372.88,-318.75 1366.88,-318.75\"/>\n",
       "<text text-anchor=\"middle\" x=\"1316.88\" y=\"-301.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1316.88\" y=\"-284.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 4</text>\n",
       "<text text-anchor=\"middle\" x=\"1316.88\" y=\"-268.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 4]</text>\n",
       "<text text-anchor=\"middle\" x=\"1316.88\" y=\"-251.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Alto</text>\n",
       "</g>\n",
       "<!-- 21&#45;&gt;27 -->\n",
       "<g id=\"edge27\" class=\"edge\">\n",
       "<title>21&#45;&gt;27</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1264.25,-362.65C1271.57,-351.54 1279.43,-339.6 1286.79,-328.43\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1289.68,-330.4 1292.26,-320.12 1283.84,-326.55 1289.68,-330.4\"/>\n",
       "</g>\n",
       "<!-- 23 -->\n",
       "<g id=\"node24\" class=\"node\">\n",
       "<title>23</title>\n",
       "<path fill=\"#e58139\" stroke=\"black\" d=\"M1128.75,-192.25C1128.75,-192.25 1025,-192.25 1025,-192.25 1019,-192.25 1013,-186.25 1013,-180.25 1013,-180.25 1013,-130.25 1013,-130.25 1013,-124.25 1019,-118.25 1025,-118.25 1025,-118.25 1128.75,-118.25 1128.75,-118.25 1134.75,-118.25 1140.75,-124.25 1140.75,-130.25 1140.75,-130.25 1140.75,-180.25 1140.75,-180.25 1140.75,-186.25 1134.75,-192.25 1128.75,-192.25\"/>\n",
       "<text text-anchor=\"middle\" x=\"1076.88\" y=\"-174.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1076.88\" y=\"-158.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 8</text>\n",
       "<text text-anchor=\"middle\" x=\"1076.88\" y=\"-141.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [8, 0]</text>\n",
       "<text text-anchor=\"middle\" x=\"1076.88\" y=\"-125.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 22&#45;&gt;23 -->\n",
       "<g id=\"edge23\" class=\"edge\">\n",
       "<title>22&#45;&gt;23</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1125.65,-236.15C1118.87,-225.04 1111.58,-213.1 1104.76,-201.93\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1107.9,-200.36 1099.7,-193.65 1101.93,-204.01 1107.9,-200.36\"/>\n",
       "</g>\n",
       "<!-- 24 -->\n",
       "<g id=\"node25\" class=\"node\">\n",
       "<title>24</title>\n",
       "<path fill=\"#9ccef2\" stroke=\"black\" d=\"M1286.75,-200.5C1286.75,-200.5 1171,-200.5 1171,-200.5 1165,-200.5 1159,-194.5 1159,-188.5 1159,-188.5 1159,-122 1159,-122 1159,-116 1165,-110 1171,-110 1171,-110 1286.75,-110 1286.75,-110 1292.75,-110 1298.75,-116 1298.75,-122 1298.75,-122 1298.75,-188.5 1298.75,-188.5 1298.75,-194.5 1292.75,-200.5 1286.75,-200.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1228.88\" y=\"-183.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">over_time &lt;= 0.331</text>\n",
       "<text text-anchor=\"middle\" x=\"1228.88\" y=\"-166.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.444</text>\n",
       "<text text-anchor=\"middle\" x=\"1228.88\" y=\"-150.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"1228.88\" y=\"-133.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 2]</text>\n",
       "<text text-anchor=\"middle\" x=\"1228.88\" y=\"-117.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Alto</text>\n",
       "</g>\n",
       "<!-- 22&#45;&gt;24 -->\n",
       "<g id=\"edge24\" class=\"edge\">\n",
       "<title>22&#45;&gt;24</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1180.1,-236.15C1185.12,-227.93 1190.41,-219.26 1195.59,-210.78\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1198.57,-212.6 1200.8,-202.24 1192.6,-208.96 1198.57,-212.6\"/>\n",
       "</g>\n",
       "<!-- 25 -->\n",
       "<g id=\"node26\" class=\"node\">\n",
       "<title>25</title>\n",
       "<path fill=\"#399de5\" stroke=\"black\" d=\"M1134.88,-74C1134.88,-74 1034.88,-74 1034.88,-74 1028.88,-74 1022.88,-68 1022.88,-62 1022.88,-62 1022.88,-12 1022.88,-12 1022.88,-6 1028.88,0 1034.88,0 1034.88,0 1134.88,0 1134.88,0 1140.88,0 1146.88,-6 1146.88,-12 1146.88,-12 1146.88,-62 1146.88,-62 1146.88,-68 1140.88,-74 1134.88,-74\"/>\n",
       "<text text-anchor=\"middle\" x=\"1084.88\" y=\"-56.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1084.88\" y=\"-40.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"1084.88\" y=\"-23.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 2]</text>\n",
       "<text text-anchor=\"middle\" x=\"1084.88\" y=\"-7.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Alto</text>\n",
       "</g>\n",
       "<!-- 24&#45;&gt;25 -->\n",
       "<g id=\"edge25\" class=\"edge\">\n",
       "<title>24&#45;&gt;25</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1173.61,-109.64C1162.22,-100.44 1150.24,-90.77 1138.9,-81.61\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1141.11,-78.9 1131.13,-75.34 1136.72,-84.35 1141.11,-78.9\"/>\n",
       "</g>\n",
       "<!-- 26 -->\n",
       "<g id=\"node27\" class=\"node\">\n",
       "<title>26</title>\n",
       "<path fill=\"#e58139\" stroke=\"black\" d=\"M1280.75,-74C1280.75,-74 1177,-74 1177,-74 1171,-74 1165,-68 1165,-62 1165,-62 1165,-12 1165,-12 1165,-6 1171,0 1177,0 1177,0 1280.75,0 1280.75,0 1286.75,0 1292.75,-6 1292.75,-12 1292.75,-12 1292.75,-62 1292.75,-62 1292.75,-68 1286.75,-74 1280.75,-74\"/>\n",
       "<text text-anchor=\"middle\" x=\"1228.88\" y=\"-56.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1228.88\" y=\"-40.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"1228.88\" y=\"-23.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 0]</text>\n",
       "<text text-anchor=\"middle\" x=\"1228.88\" y=\"-7.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 24&#45;&gt;26 -->\n",
       "<g id=\"edge26\" class=\"edge\">\n",
       "<title>24&#45;&gt;26</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1228.88,-109.64C1228.88,-101.81 1228.88,-93.63 1228.88,-85.72\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1232.38,-85.91 1228.88,-75.91 1225.38,-85.91 1232.38,-85.91\"/>\n",
       "</g>\n",
       "<!-- 29 -->\n",
       "<g id=\"node30\" class=\"node\">\n",
       "<title>29</title>\n",
       "<path fill=\"#3c9fe5\" stroke=\"black\" d=\"M1640.25,-327C1640.25,-327 1527.5,-327 1527.5,-327 1521.5,-327 1515.5,-321 1515.5,-315 1515.5,-315 1515.5,-248.5 1515.5,-248.5 1515.5,-242.5 1521.5,-236.5 1527.5,-236.5 1527.5,-236.5 1640.25,-236.5 1640.25,-236.5 1646.25,-236.5 1652.25,-242.5 1652.25,-248.5 1652.25,-248.5 1652.25,-315 1652.25,-315 1652.25,-321 1646.25,-327 1640.25,-327\"/>\n",
       "<text text-anchor=\"middle\" x=\"1583.88\" y=\"-309.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">wip &lt;= 0.001</text>\n",
       "<text text-anchor=\"middle\" x=\"1583.88\" y=\"-293.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.031</text>\n",
       "<text text-anchor=\"middle\" x=\"1583.88\" y=\"-276.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 319</text>\n",
       "<text text-anchor=\"middle\" x=\"1583.88\" y=\"-260.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [5.0, 314.0]</text>\n",
       "<text text-anchor=\"middle\" x=\"1583.88\" y=\"-243.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Alto</text>\n",
       "</g>\n",
       "<!-- 28&#45;&gt;29 -->\n",
       "<g id=\"edge29\" class=\"edge\">\n",
       "<title>28&#45;&gt;29</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1583.88,-362.65C1583.88,-354.97 1583.88,-346.89 1583.88,-338.94\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1587.38,-338.97 1583.88,-328.97 1580.38,-338.97 1587.38,-338.97\"/>\n",
       "</g>\n",
       "<!-- 36 -->\n",
       "<g id=\"node37\" class=\"node\">\n",
       "<title>36</title>\n",
       "<path fill=\"#ffffff\" stroke=\"black\" d=\"M1863,-327C1863,-327 1754.75,-327 1754.75,-327 1748.75,-327 1742.75,-321 1742.75,-315 1742.75,-315 1742.75,-248.5 1742.75,-248.5 1742.75,-242.5 1748.75,-236.5 1754.75,-236.5 1754.75,-236.5 1863,-236.5 1863,-236.5 1869,-236.5 1875,-242.5 1875,-248.5 1875,-248.5 1875,-315 1875,-315 1875,-321 1869,-327 1863,-327\"/>\n",
       "<text text-anchor=\"middle\" x=\"1808.88\" y=\"-309.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">incentive &lt;= 0.344</text>\n",
       "<text text-anchor=\"middle\" x=\"1808.88\" y=\"-293.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1808.88\" y=\"-276.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 6</text>\n",
       "<text text-anchor=\"middle\" x=\"1808.88\" y=\"-260.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 3]</text>\n",
       "<text text-anchor=\"middle\" x=\"1808.88\" y=\"-243.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 28&#45;&gt;36 -->\n",
       "<g id=\"edge36\" class=\"edge\">\n",
       "<title>28&#45;&gt;36</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1646.25,-372.74C1673.01,-357.93 1704.52,-340.49 1732.65,-324.93\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1734.06,-328.15 1741.12,-320.24 1730.67,-322.02 1734.06,-328.15\"/>\n",
       "</g>\n",
       "<!-- 30 -->\n",
       "<g id=\"node31\" class=\"node\">\n",
       "<title>30</title>\n",
       "<path fill=\"#ffffff\" stroke=\"black\" d=\"M1564.75,-200.5C1564.75,-200.5 1461,-200.5 1461,-200.5 1455,-200.5 1449,-194.5 1449,-188.5 1449,-188.5 1449,-122 1449,-122 1449,-116 1455,-110 1461,-110 1461,-110 1564.75,-110 1564.75,-110 1570.75,-110 1576.75,-116 1576.75,-122 1576.75,-122 1576.75,-188.5 1576.75,-188.5 1576.75,-194.5 1570.75,-200.5 1564.75,-200.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1512.88\" y=\"-183.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">smv &lt;= 0.225</text>\n",
       "<text text-anchor=\"middle\" x=\"1512.88\" y=\"-166.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1512.88\" y=\"-150.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n",
       "<text text-anchor=\"middle\" x=\"1512.88\" y=\"-133.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 1]</text>\n",
       "<text text-anchor=\"middle\" x=\"1512.88\" y=\"-117.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 29&#45;&gt;30 -->\n",
       "<g id=\"edge30\" class=\"edge\">\n",
       "<title>29&#45;&gt;30</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1558.44,-236.15C1553.75,-227.93 1548.81,-219.26 1543.97,-210.78\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1547.11,-209.22 1539.12,-202.27 1541.03,-212.69 1547.11,-209.22\"/>\n",
       "</g>\n",
       "<!-- 33 -->\n",
       "<g id=\"node34\" class=\"node\">\n",
       "<title>33</title>\n",
       "<path fill=\"#3c9ee5\" stroke=\"black\" d=\"M1715,-200.5C1715,-200.5 1606.75,-200.5 1606.75,-200.5 1600.75,-200.5 1594.75,-194.5 1594.75,-188.5 1594.75,-188.5 1594.75,-122 1594.75,-122 1594.75,-116 1600.75,-110 1606.75,-110 1606.75,-110 1715,-110 1715,-110 1721,-110 1727,-116 1727,-122 1727,-122 1727,-188.5 1727,-188.5 1727,-194.5 1721,-200.5 1715,-200.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"1660.88\" y=\"-183.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">incentive &lt;= 0.308</text>\n",
       "<text text-anchor=\"middle\" x=\"1660.88\" y=\"-166.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.025</text>\n",
       "<text text-anchor=\"middle\" x=\"1660.88\" y=\"-150.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 317</text>\n",
       "<text text-anchor=\"middle\" x=\"1660.88\" y=\"-133.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [4, 313]</text>\n",
       "<text text-anchor=\"middle\" x=\"1660.88\" y=\"-117.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Alto</text>\n",
       "</g>\n",
       "<!-- 29&#45;&gt;33 -->\n",
       "<g id=\"edge33\" class=\"edge\">\n",
       "<title>29&#45;&gt;33</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1611.46,-236.15C1616.6,-227.84 1622.02,-219.07 1627.32,-210.5\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1630.15,-212.59 1632.43,-202.24 1624.19,-208.9 1630.15,-212.59\"/>\n",
       "</g>\n",
       "<!-- 31 -->\n",
       "<g id=\"node32\" class=\"node\">\n",
       "<title>31</title>\n",
       "<path fill=\"#399de5\" stroke=\"black\" d=\"M1422.88,-74C1422.88,-74 1322.88,-74 1322.88,-74 1316.88,-74 1310.88,-68 1310.88,-62 1310.88,-62 1310.88,-12 1310.88,-12 1310.88,-6 1316.88,0 1322.88,0 1322.88,0 1422.88,0 1422.88,0 1428.88,0 1434.88,-6 1434.88,-12 1434.88,-12 1434.88,-62 1434.88,-62 1434.88,-68 1428.88,-74 1422.88,-74\"/>\n",
       "<text text-anchor=\"middle\" x=\"1372.88\" y=\"-56.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1372.88\" y=\"-40.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"1372.88\" y=\"-23.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1]</text>\n",
       "<text text-anchor=\"middle\" x=\"1372.88\" y=\"-7.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Alto</text>\n",
       "</g>\n",
       "<!-- 30&#45;&gt;31 -->\n",
       "<g id=\"edge31\" class=\"edge\">\n",
       "<title>30&#45;&gt;31</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1459.15,-109.64C1448.07,-100.44 1436.42,-90.77 1425.39,-81.61\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1427.8,-79.06 1417.87,-75.36 1423.33,-84.44 1427.8,-79.06\"/>\n",
       "</g>\n",
       "<!-- 32 -->\n",
       "<g id=\"node33\" class=\"node\">\n",
       "<title>32</title>\n",
       "<path fill=\"#e58139\" stroke=\"black\" d=\"M1568.75,-74C1568.75,-74 1465,-74 1465,-74 1459,-74 1453,-68 1453,-62 1453,-62 1453,-12 1453,-12 1453,-6 1459,0 1465,0 1465,0 1568.75,0 1568.75,0 1574.75,0 1580.75,-6 1580.75,-12 1580.75,-12 1580.75,-62 1580.75,-62 1580.75,-68 1574.75,-74 1568.75,-74\"/>\n",
       "<text text-anchor=\"middle\" x=\"1516.88\" y=\"-56.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1516.88\" y=\"-40.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"1516.88\" y=\"-23.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 0]</text>\n",
       "<text text-anchor=\"middle\" x=\"1516.88\" y=\"-7.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 30&#45;&gt;32 -->\n",
       "<g id=\"edge32\" class=\"edge\">\n",
       "<title>30&#45;&gt;32</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1514.41,-109.64C1514.68,-101.81 1514.96,-93.63 1515.23,-85.72\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1518.72,-86.02 1515.57,-75.91 1511.73,-85.78 1518.72,-86.02\"/>\n",
       "</g>\n",
       "<!-- 34 -->\n",
       "<g id=\"node35\" class=\"node\">\n",
       "<title>34</title>\n",
       "<path fill=\"#48a5e7\" stroke=\"black\" d=\"M1710.88,-74C1710.88,-74 1610.88,-74 1610.88,-74 1604.88,-74 1598.88,-68 1598.88,-62 1598.88,-62 1598.88,-12 1598.88,-12 1598.88,-6 1604.88,0 1610.88,0 1610.88,0 1710.88,0 1710.88,0 1716.88,0 1722.88,-6 1722.88,-12 1722.88,-12 1722.88,-62 1722.88,-62 1722.88,-68 1716.88,-74 1710.88,-74\"/>\n",
       "<text text-anchor=\"middle\" x=\"1660.88\" y=\"-56.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.133</text>\n",
       "<text text-anchor=\"middle\" x=\"1660.88\" y=\"-40.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 42</text>\n",
       "<text text-anchor=\"middle\" x=\"1660.88\" y=\"-23.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 39]</text>\n",
       "<text text-anchor=\"middle\" x=\"1660.88\" y=\"-7.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Alto</text>\n",
       "</g>\n",
       "<!-- 33&#45;&gt;34 -->\n",
       "<g id=\"edge34\" class=\"edge\">\n",
       "<title>33&#45;&gt;34</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1660.88,-109.64C1660.88,-101.81 1660.88,-93.63 1660.88,-85.72\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1664.38,-85.91 1660.88,-75.91 1657.38,-85.91 1664.38,-85.91\"/>\n",
       "</g>\n",
       "<!-- 35 -->\n",
       "<g id=\"node36\" class=\"node\">\n",
       "<title>35</title>\n",
       "<path fill=\"#3a9de5\" stroke=\"black\" d=\"M1852.88,-74C1852.88,-74 1752.88,-74 1752.88,-74 1746.88,-74 1740.88,-68 1740.88,-62 1740.88,-62 1740.88,-12 1740.88,-12 1740.88,-6 1746.88,0 1752.88,0 1752.88,0 1852.88,0 1852.88,0 1858.88,0 1864.88,-6 1864.88,-12 1864.88,-12 1864.88,-62 1864.88,-62 1864.88,-68 1858.88,-74 1852.88,-74\"/>\n",
       "<text text-anchor=\"middle\" x=\"1802.88\" y=\"-56.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.007</text>\n",
       "<text text-anchor=\"middle\" x=\"1802.88\" y=\"-40.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 275</text>\n",
       "<text text-anchor=\"middle\" x=\"1802.88\" y=\"-23.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [1, 274]</text>\n",
       "<text text-anchor=\"middle\" x=\"1802.88\" y=\"-7.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Alto</text>\n",
       "</g>\n",
       "<!-- 33&#45;&gt;35 -->\n",
       "<g id=\"edge35\" class=\"edge\">\n",
       "<title>33&#45;&gt;35</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1715.37,-109.64C1726.6,-100.44 1738.42,-90.77 1749.61,-81.61\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1751.73,-84.4 1757.25,-75.35 1747.29,-78.98 1751.73,-84.4\"/>\n",
       "</g>\n",
       "<!-- 37 -->\n",
       "<g id=\"node38\" class=\"node\">\n",
       "<title>37</title>\n",
       "<path fill=\"#e58139\" stroke=\"black\" d=\"M1860.75,-192.25C1860.75,-192.25 1757,-192.25 1757,-192.25 1751,-192.25 1745,-186.25 1745,-180.25 1745,-180.25 1745,-130.25 1745,-130.25 1745,-124.25 1751,-118.25 1757,-118.25 1757,-118.25 1860.75,-118.25 1860.75,-118.25 1866.75,-118.25 1872.75,-124.25 1872.75,-130.25 1872.75,-130.25 1872.75,-180.25 1872.75,-180.25 1872.75,-186.25 1866.75,-192.25 1860.75,-192.25\"/>\n",
       "<text text-anchor=\"middle\" x=\"1808.88\" y=\"-174.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1808.88\" y=\"-158.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"1808.88\" y=\"-141.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [3, 0]</text>\n",
       "<text text-anchor=\"middle\" x=\"1808.88\" y=\"-125.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Bajo</text>\n",
       "</g>\n",
       "<!-- 36&#45;&gt;37 -->\n",
       "<g id=\"edge37\" class=\"edge\">\n",
       "<title>36&#45;&gt;37</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1808.88,-236.15C1808.88,-225.6 1808.88,-214.31 1808.88,-203.63\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1812.38,-203.87 1808.88,-193.87 1805.38,-203.87 1812.38,-203.87\"/>\n",
       "</g>\n",
       "<!-- 38 -->\n",
       "<g id=\"node39\" class=\"node\">\n",
       "<title>38</title>\n",
       "<path fill=\"#399de5\" stroke=\"black\" d=\"M2002.88,-192.25C2002.88,-192.25 1902.88,-192.25 1902.88,-192.25 1896.88,-192.25 1890.88,-186.25 1890.88,-180.25 1890.88,-180.25 1890.88,-130.25 1890.88,-130.25 1890.88,-124.25 1896.88,-118.25 1902.88,-118.25 1902.88,-118.25 2002.88,-118.25 2002.88,-118.25 2008.88,-118.25 2014.88,-124.25 2014.88,-130.25 2014.88,-130.25 2014.88,-180.25 2014.88,-180.25 2014.88,-186.25 2008.88,-192.25 2002.88,-192.25\"/>\n",
       "<text text-anchor=\"middle\" x=\"1952.88\" y=\"-174.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"1952.88\" y=\"-158.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n",
       "<text text-anchor=\"middle\" x=\"1952.88\" y=\"-141.95\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 3]</text>\n",
       "<text text-anchor=\"middle\" x=\"1952.88\" y=\"-125.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = Prod Alto</text>\n",
       "</g>\n",
       "<!-- 36&#45;&gt;38 -->\n",
       "<g id=\"edge38\" class=\"edge\">\n",
       "<title>36&#45;&gt;38</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1860.46,-236.15C1874.22,-224.25 1889.08,-211.41 1902.76,-199.58\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1904.69,-202.53 1909.97,-193.35 1900.12,-197.24 1904.69,-202.53\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.sources.Source at 0x24383af1810>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#visualizacion del arbol de decision\n",
    "grf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "XNraS_lWFkk_"
   },
   "source": [
    "# Referencias"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Oq6SWYx1FmmS"
   },
   "source": [
    "- Kane, F. (2017). Hands-On Data Science and Python Machine Learning. Packt\n",
    "Publishing. (pp. 183-195).\n",
    "- Raschka, S., & Mirjalili, V. (2017). Python Machine Learning - Second Edition: Vol.\n",
    "2nd ed. Packt Publishing. (pp. 90-103)."
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
